PS C:\git projects\Multi-Source_RAG_Platform> poetry run python -m app.cli embed data/projects/demo_project_batch_api --async
2025-06-23 15:35:52 | INFO     | embedder | Embedding mode override: use_async_batch=True
2025-06-23 15:35:58 | INFO     | embedder | Embedder initialized with mode: batch | batch_size: 100
2025-06-23 15:35:58 | INFO     | embedder | Embedding chunks from: chunks_docx.tsv
╭────────────────────────────────────────────────────────────────────────── Traceback (most recent call last) ──────────────────────────────────────────────────────────────────────────╮
│ C:\git projects\Multi-Source_RAG_Platform\app\cli.py:158 in embed                                                                                                                     │
│                                                                                                                                                                                       │
│   155 │   │   logger.info("Embedding mode override: use_async_batch=True")                                                                                                            │
│   156 │                                                                                                                                                                               │
│   157 │   embedder = UnifiedEmbedder(project)                                                                                                                                         │
│ ❱ 158 │   embedder.run_from_folder()                                                                                                                                                  │
│   159                                                                                                                                                                                 │
│   160 if __name__ == "__main__":                                                                                                                                                      │
│   161 │   app()                                                                                                                                                                       │
│                                                                                                                                                                                       │
│ ╭─────────────────────────────────────────────── locals ───────────────────────────────────────────────╮                                                                              │
│ │        embedder = <scripts.embeddings.unified_embedder.UnifiedEmbedder object at 0x00000249FB08AF90> │                                                                              │
│ │          logger = <Logger embedder (DEBUG)>                                                          │                                                                              │
│ │         project = <scripts.core.project_manager.ProjectManager object at 0x00000249FB08AE40>         │                                                                              │
│ │     project_dir = WindowsPath('data/projects/demo_project_batch_api')                                │                                                                              │
│ │ use_async_batch = True                                                                               │                                                                              │
│ ╰──────────────────────────────────────────────────────────────────────────────────────────────────────╯                                                                              │
│                                                                                                                                                                                       │
│ C:\git projects\Multi-Source_RAG_Platform\scripts\embeddings\unified_embedder.py:59 in run_from_folder                                                                                │
│                                                                                                                                                                                       │
│    56 │   │   for path in chunk_files:                                                                                                                                                │
│    57 │   │   │   self.logger.info(f"Embedding chunks from: {path.name}")                                                                                                             │
│    58 │   │   │   chunks = load_chunks(path)                                                                                                                                          │
│ ❱  59 │   │   │   self.run(chunks)                                                                                                                                                    │
│    60 │                                                                                                                                                                               │
│    61 │   def run(self, chunks: List[Chunk]) -> None:                                                                                                                                 │
│    62 │   │   # Group by doc_type                                                                                                                                                     │
│                                                                                                                                                                                       │
│ ╭───────────────────────────────────────────────────────────────────────────────────── locals ──────────────────────────────────────────────────────────────────────────────────────╮ │
│ │ chunk_files = [                                                                                                                                                                   │ │
│ │               │   WindowsPath('C:/git projects/Multi-Source_RAG_Platform/data/projects/demo_project_batch_api/input/chunks_docx.tsv'),                                            │ │
│ │               │   WindowsPath('C:/git projects/Multi-Source_RAG_Platform/data/projects/demo_project_batch_api/input/chunks_pdf.tsv'),                                             │ │
│ │               │   WindowsPath('C:/git projects/Multi-Source_RAG_Platform/data/projects/demo_project_batch_api/input/chunks_pptx.tsv'),                                            │ │
│ │               │   WindowsPath('C:/git projects/Multi-Source_RAG_Platform/data/projects/demo_project_batch_api/input/chunks_txt.tsv'),                                             │ │
│ │               │   WindowsPath('C:/git projects/Multi-Source_RAG_Platform/data/projects/demo_project_batch_api/input/chunks_xlsx.tsv')                                             │ │
│ │               ]                                                                                                                                                                   │ │
│ │      chunks = [                                                                                                                                                                   │ │
│ │               │   Chunk(doc_id='data\\projects\\demo_project_batch_api\\input\\raw\\2024 Q1 New Content Roadmap.docx', text='Q1 2024 New Content Roadmap The content team is      │ │
│ │               happy to present the content roadmap for Q1, 2024. The roadmap is planned to highlight our content operations plans for each quarter, and communicate the upcoming  │ │
│ │               expected new content plans. This list is dynamic and subject to possible changes, depending on the availability of the records and questions that may arise as we   │ │
│ │               work through the ingestion process. Currently, while we work to learn and adjust to the community needs for such a list, the table below is only a partial          │ │
│ │               representation of the new content that has been scoped for ingestion into the Ex Libris products. A "V" mark indicates that this content is planned to be ingested  │ │
│ │               to these products in the coming quarter. The full lists of ingested content continue to be available weekly as part of the relevant Release Notes. If any questions │ │
│ │               arise, please contact us via a Support Case and reference the list below. General highlights Authority vocabulary and enrichment highlights Non-English and         │ │
│ │               Regional highlights --- TABLE START --- Provider | Collections | Delivery – 360/SFX/Alma | Discovery – CDI | Notes Liverpool University Press | White Horse Press | │ │
│ │               V Eastview | CRL collections enrichment with MARC | V Edward Elgar | Encyclopedia of Tourism and Management | V Lived Places Publishing | Books collection | V Gale │ │
│ │               Primary Sources | Decolonization Politics; Making of Modern Law; Women\'s Studies Archive; State Papers Online Colonial; Times Educational Supplement | V Taylor &  │ │
│ │               Francis | Routledge Handbooks | V ASME | ASME all transactions journals | V Sage | Knowledge Video collections | V ACS | ACS In Focus Collection 3 | V ASPET |      │ │
│ │               Journal collections | V SAE | SAE Magazines | V ESA | BioOne | V', meta={'source_filepath': 'data\\projects\\demo_project_batch_api\\input\\raw\\2024 Q1 New        │ │
│ │               Content Roadmap.docx', 'doc_type': 'docx', 'source': 'data\\projects\\demo_project_batch_api\\input\\raw\\2024 Q1 New Content Roadmap.docx', 'content_type':        │ │
│ │               'docx', 'doc_id': 'data\\projects\\demo_project_batch_api\\input\\raw\\2024 Q1 New Content Roadmap.docx'}, token_count=294, title=None, summary=None,               │ │
│ │               embedding=None, id='1ce8cf43638d468cb4fef4b9f4286011'),                                                                                                             │ │
│ │               │   Chunk(doc_id='data\\projects\\demo_project_batch_api\\input\\raw\\2024 Q1 New Content Roadmap.docx', text='3 | V ASPET | Journal collections | V SAE | SAE      │ │
│ │               Magazines | V ESA | BioOne | V JSTOR | 7 collections | V | V | Idea Exchange The House Magazine | The House Magazine | V Begell House | 7 collections | V IBISWorld │ │
│ │               | Australian Industry Reports | V Beamafilm | Australian Videos | V Newsbank | Single title archives | V | Idea Exchange Adam Matthew | Royal Shakespeare Company   │ │
│ │               Archives | V | Idea Exchange EastView | Enriching Slavic and Judaica book collections | V --- TABLE END --- --- TABLE START --- Provider | Collections | Delivery – │ │
│ │               360/SFX/Alma | Discovery – CDI | Notes Homos aurus | international LGBTQ+ Authority Vocabulary | V | Carried over from Q4 2023 Idea Exchange National Authorities   │ │
│ │               of NLK | National Library of Korea Authority Vocabulary | V AIATSIS | Aboriginal and Torres Strait Islander Authority Vocabulary | V | Idea Exchange TEKA | Finnish │ │
│ │               Work and Expression Authorities | V | Idea Exchange --- TABLE END --- --- TABLE START --- Provider | Collections | Delivery – 360/SFX/Alma | Discovery – CDI |      │ │
│ │               Notes Chinese Academy of Social Sciences | National Social Sciences Database (NSSD) | V Boomportaal | Boomportaal e-journals | V Preselect | Journals | V GOKb |    │ │
│ │               BIBSAM collections | V --- TABLE END ---', meta={'source_filepath': 'data\\projects\\demo_project_batch_api\\input\\raw\\2024 Q1 New Content Roadmap.docx',         │ │
│ │               'doc_type': 'docx', 'source': 'data\\projects\\demo_project_batch_api\\input\\raw\\2024 Q1 New Content Roadmap.docx', 'content_type': 'docx', 'doc_id':             │ │
│ │               'data\\projects\\demo_project_batch_api\\input\\raw\\2024 Q1 New Content Roadmap.docx'}, token_count=224, title=None, summary=None, embedding=None,                 │ │
│ │               id='41ba614b00ce4d31983add69ec4f4b1e'),                                                                                                                             │ │
│ │               │   Chunk(doc_id='data\\projects\\demo_project_batch_api\\input\\raw\\Leganto_Integration.docx', text='Leganto Integration --- TABLE START --- Script | Direction   │ │
│ │               You can integrate campusM with Leganto, Ex Libris’s resource list management system, allowing students to access their course resource lists, and instructors to    │ │
│ │               create and manage their lists, all from their mobile device. In this session, we’ll take a quick tour of the Leganto integration, then we’ll show how to configure  │ │
│ │               the authentication, product integration instance, and live tile for the integration. | General screenshots of the Leganto PI homepage We are currently logged in as │ │
│ │               an instructor in our campusM app on web, which automatically logs us into library services, such as Leganto, as well. The Leganto tile shows us live personal       │ │
│ │               information at a glance, such as to how many lists we are subscribed, how many notifications we have, how many due dates for reading or viewing the list items, and │ │
│ │               the next due date, if applicable. Clicking on the tile takes us to Leganto. In the Lists page, you can see all your reading lists, add a new list, and open a list  │ │
│ │               to view it. When viewing a resource list, you can add items, add list sections, and perform all the editing actions on items. From the user menu, you can access    │ │
│ │               language and user settings, go to RefWorks, and use the Cite It! Widget. From the navigation menu, you can go back to lists, view your collection of items, and     │ │
│ │               find a reading list by searching your institution. This concludes our quick tour of the Leganto integration. Next, let’s see how to configure it. | campusM App All │ │
│ │               configurations for the Leganto integration are done within the App Manager.', meta={'source_filepath':                                                              │ │
│ │               'data\\projects\\demo_project_batch_api\\input\\raw\\Leganto_Integration.docx', 'doc_type': 'docx', 'source':                                                       │ │
│ │               'data\\projects\\demo_project_batch_api\\input\\raw\\Leganto_Integration.docx', 'content_type': 'docx', 'doc_id':                                                   │ │
│ │               'data\\projects\\demo_project_batch_api\\input\\raw\\Leganto_Integration.docx'}, token_count=273, title=None, summary=None, embedding=None,                         │ │
│ │               id='bcca81a2a9db4b329a4d94c1f5e4ec97'),                                                                                                                             │ │
│ │               │   Chunk(doc_id='data\\projects\\demo_project_batch_api\\input\\raw\\Leganto_Integration.docx', text='see how to configure it. | campusM App All configurations    │ │
│ │               for the Leganto integration are done within the App Manager. The first step is to configure the user’s authentication in the library. As we mentioned, users are    │ │
│ │               automatically logged in to Leganto via Alma in a single-sign-on, or SSO. For this, we need to verify that the user’s AlmaID attribute is being returned by the      │ │
│ │               identity provider, or IDP. To configure the assignment of the AlmaID from the IDP, go to App Settings > Integration Profiles, and edit the relevant integration     │ │
│ │               profile. In the integration profile editor, under Additional Mappings, make sure you populate the AlmaId with the relevant parameter in the IDP token. Note that if │ │
│ │               the app sends an invalid AlmaID to Alma, the user will not be logged in and will need to log in manually. Save your changes. | App Manager > App Settings >         │ │
│ │               Integration profile > Additional Mappings Next, let’s set up the Leganto integration. In App Manager, go to Product Integrations, and click Add Product Integration │ │
│ │               Instance. For the Product Integration Type, select Leganto. | App Manager > App Builder In this page, you can configure your Leganto integration. Select Enable     │ │
│ │               Product Integration; and provide a Description, which is the name of the integration. | Description: Course Readings In the General section, you must fill in this  │ │
│ │               information: Under Base URL, fill in the base URL of your Alma instance, which is linked to Leganto. Enter your Alma Institution Code. The Authorization Token is a │ │
│ │               secured handshake between campusM and Alma, that needs to be configured both here and in Alma. Make sure the token you enter here matches the one in Alma under     │ │
│ │               Discovery > Customer Settings > app_authorization_token.', meta={'source_filepath': 'data\\projects\\demo_project_batch_api\\input\\raw\\Leganto_Integration.docx', │ │
│ │               'doc_type': 'docx', 'source': 'data\\projects\\demo_project_batch_api\\input\\raw\\Leganto_Integration.docx', 'content_type': 'docx', 'doc_id':                     │ │
│ │               'data\\projects\\demo_project_batch_api\\input\\raw\\Leganto_Integration.docx'}, token_count=287, title=None, summary=None, embedding=None,                         │ │
│ │               id='28d1db7e36be46d7ad8cc58a083373ac'),                                                                                                                             │ │
│ │               │   Chunk(doc_id='data\\projects\\demo_project_batch_api\\input\\raw\\Leganto_Integration.docx', text='Alma. Make sure the token you enter here matches the one in  │ │
│ │               Alma under Discovery > Customer Settings > app_authorization_token. You may select a Landing Page, which is where the user is redirected when they click on the     │ │
│ │               live tile. By default, it’s your Leganto Lists page, but it can also be the Leganto Search page. In the Live Tile section, if Enabled, the live tile will be        │ │
│ │               available in the Leganto home screen, displaying personalized info; otherwise, the tile will be static. Under Live Tile Items, you can select which widgets you     │ │
│ │               would like to see in the live tile. Show Lists – displays the number of lists to which the user is subscribed. Show Notifications – displays the number of unread   │ │
│ │               notifications. Show Due Dates – displays how many items are due to be read or viewed. And Show Next Due Date – displays the next due date for an item, if           │ │
│ │               applicable. In the Prioritize Live Tile Items section, you can change the display order of the live tile items via the arrows. For the icons of the live tile       │ │
│ │               items, we will use campusM’s default icons. Alternatively, you can select to upload custom icons of your own. In the Text/Labels section, you may customize the     │ │
│ │               text labels for the various widgets. When done configuring your Leganto integration, click Save. The new Leganto integration has been created. The final step in    │ │
│ │               the deployment is to add a menu option, or tile, to the home screen, which is connected to the Leganto integration we just created. In App Manager, go to App       │ │
│ │               Builder, and add a menu option. From the available menu option types, select Product Integrations Tile. For the product integration instance, select your newly     │ │
│ │               created Leganto integration. Give the menu option a name, and click Create.', meta={'source_filepath':                                                              │ │
│ │               'data\\projects\\demo_project_batch_api\\input\\raw\\Leganto_Integration.docx', 'doc_type': 'docx', 'source':                                                       │ │
│ │               'data\\projects\\demo_project_batch_api\\input\\raw\\Leganto_Integration.docx', 'content_type': 'docx', 'doc_id':                                                   │ │
│ │               'data\\projects\\demo_project_batch_api\\input\\raw\\Leganto_Integration.docx'}, token_count=300, title=None, summary=None, embedding=None,                         │ │
│ │               id='531e15b6dc194c29908095d414c22542'),                                                                                                                             │ │
│ │               │   Chunk(doc_id='data\\projects\\demo_project_batch_api\\input\\raw\\Leganto_Integration.docx', text='For the product integration instance, select your newly      │ │
│ │               created Leganto integration. Give the menu option a name, and click Create. Our menu option has been added. You can now configure this tile, as you would with any  │ │
│ │               other tile; for example, to change its size. Our tile’s appearance has been changed. Our live tile appears blank in the preview, but the user will see it populated │ │
│ │               with their personalized data! When done configuring your tile, click Save & Publish. The tile is now published to the end-users of the app. Thanks for joining! --- │ │
│ │               TABLE END ---', meta={'source_filepath': 'data\\projects\\demo_project_batch_api\\input\\raw\\Leganto_Integration.docx', 'doc_type': 'docx', 'source':              │ │
│ │               'data\\projects\\demo_project_batch_api\\input\\raw\\Leganto_Integration.docx', 'content_type': 'docx', 'doc_id':                                                   │ │
│ │               'data\\projects\\demo_project_batch_api\\input\\raw\\Leganto_Integration.docx'}, token_count=97, title=None, summary=None, embedding=None,                          │ │
│ │               id='53de45a3f2304880a8ca04d8102f3763'),                                                                                                                             │ │
│ │               │   Chunk(doc_id='data\\projects\\demo_project_batch_api\\input\\raw\\Scheduling_and_Monitoring_Jobs-Handout.docx', text="Alma Administration – General Scheduling  │ │
│ │               and Monitoring Jobs Hi, in this session, we'll learn how to: schedule certain jobs in Alma; monitor the status of scheduled and manual jobs; and add a widget to    │ │
│ │               your homepage that shows the scheduled jobs status. Some jobs in Alma are manual jobs, which means they are run by library staff on the fly. Other jobs are         │ │
│ │               scheduled, which means they run at certain time intervals. Many jobs can be run both manually and scheduled. Among the scheduled jobs, some are scheduled by Ex     │ │
│ │               Libris and cannot be changed by the institution, while others can be scheduled by you, the Alma administrators. Primarily, the jobs you can schedule are related to │ │
│ │               Fulfillment and Acquisitions. To schedule Fulfillment related jobs, open Alma Configuration > Fulfillment > General: Fulfillment Jobs Configuration. Here you can   │ │
│ │               see and configure all the scheduled jobs related to Fulfillment; for example, the Borrowing Activity Report Job and the Send Overdue Notices Job. Each job can be   │ │
│ │               set as Active, which means it will run on schedule; or Inactive, which means it will not run on its own, but can still be run manually where available. To          │ │
│ │               configure the schedule of an Active job, open the Schedule dropdown-list and select a schedule. Different jobs offer different possible schedules. For example, the │ │
│ │               Borrowing Activity Report job can be run weekly (on the selected day), monthly (on the selected date), or not run on schedule at all. Note that depending on your   │ │
│ │               region and settings, you may see different scheduling options available here. Some jobs can be run manually by clicking Run Now.", meta={'source_filepath':         │ │
│ │               'data\\projects\\demo_project_batch_api\\input\\raw\\Scheduling_and_Monitoring_Jobs-Handout.docx', 'doc_type': 'docx', 'source':                                    │ │
│ │               'data\\projects\\demo_project_batch_api\\input\\raw\\Scheduling_and_Monitoring_Jobs-Handout.docx', 'content_type': 'docx', 'doc_id':                                │ │
│ │               'data\\projects\\demo_project_batch_api\\input\\raw\\Scheduling_and_Monitoring_Jobs-Handout.docx'}, token_count=269, title=None, summary=None, embedding=None,      │ │
│ │               id='c5d98d40120b4a4a994f0f34f6a1a3b3'),                                                                                                                             │ │
│ │               │   Chunk(doc_id='data\\projects\\demo_project_batch_api\\input\\raw\\Scheduling_and_Monitoring_Jobs-Handout.docx', text="and settings, you may see different       │ │
│ │               scheduling options available here. Some jobs can be run manually by clicking Run Now. There are other job-specific configurations you can make on this page. For    │ │
│ │               example, in the Anonymization job you can decide which fulfillment activities will have their identifying user information scrubbed when certain conditions are     │ │
│ │               met. When done configuring the jobs, click Save. Acquisitions related jobs can be configured under Alma Configuration > Acquisitions > General: Acquisition Jobs    │ │
│ │               Configuration. Here you can configure the PO Line package job and the SUSHI harvesting job. Resource Management jobs can be configured in a similar page. Now let's │ │
│ │               see how you can monitor the statuses of all jobs in Alma. Go back to Alma > Admin > Manage Jobs and Sets: Monitor Jobs. In the Scheduled tab, you can see all your  │ │
│ │               upcoming scheduled jobs, whether scheduled by library staff or Ex Libris. You can filter this page by Job Category, for example to see only Fulfillment jobs. For   │ │
│ │               each job, you can see whether it's active, what its schedule is, and when is the next scheduled run. Under row actions, you can select to view the Job History of   │ │
│ │               previous runs. And if you wish to receive email notifications when this job is run, you can add yourself and other users as subscribers. In the Monitor Jobs        │ │
│ │               Running tab, you can follow the progress of currently running jobs. This includes both scheduled jobs and manual jobs, such as the ones run from Admin > Run a      │ │
│ │               Job.", meta={'source_filepath': 'data\\projects\\demo_project_batch_api\\input\\raw\\Scheduling_and_Monitoring_Jobs-Handout.docx', 'doc_type': 'docx', 'source':    │ │
│ │               'data\\projects\\demo_project_batch_api\\input\\raw\\Scheduling_and_Monitoring_Jobs-Handout.docx', 'content_type': 'docx', 'doc_id':                                │ │
│ │               'data\\projects\\demo_project_batch_api\\input\\raw\\Scheduling_and_Monitoring_Jobs-Handout.docx'}, token_count=254, title=None, summary=None, embedding=None,      │ │
│ │               id='b7f05718a631410ca92d8b86b83baaa0'),                                                                                                                             │ │
│ │               │   Chunk(doc_id='data\\projects\\demo_project_batch_api\\input\\raw\\Scheduling_and_Monitoring_Jobs-Handout.docx', text="jobs. This includes both scheduled jobs   │ │
│ │               and manual jobs, such as the ones run from Admin > Run a Job. In the Monitor Jobs History tab, you can see all the completed jobs. You can filter this list by Job  │ │
│ │               Category, Job Status, and the Submit Date Range, for example, to see all the jobs run last month. You can quickly see which jobs Completed Successfully and which   │ │
│ │               Completed with Errors. Under row actions, you can pull up the Job Report which details all the job information, or view Events to see any error messages raised     │ │
│ │               during runtime. One very convenient way to monitor jobs in Alma is to add the Scheduled Jobs Status widget to your homepage. From the Alma homepage, click the plus │ │
│ │               icon on the top right of the Alma dashboard. Select the Scheduled Jobs Status widget, and close the Manage Widgets dialog. The widget has been added to your        │ │
│ │               dashboard. You can drag and drop it to the desired location. The Scheduled Jobs Status widget presents the status of scheduled jobs for the last five days. You can │ │
│ │               select the date and Job Category to view, and immediately see the failure and success indicators. For more detailed information, click on the arrow for a given job │ │
│ │               category, and you will be redirected to the Monitor Jobs History tab, filtered to view the selected jobs. In this case, all the unsuccessful jobs, to aid with      │ │
│ │               troubleshooting. And that's how you schedule and monitor jobs in Alma. Thanks for joining!", meta={'source_filepath':                                               │ │
│ │               'data\\projects\\demo_project_batch_api\\input\\raw\\Scheduling_and_Monitoring_Jobs-Handout.docx', 'doc_type': 'docx', 'source':                                    │ │
│ │               'data\\projects\\demo_project_batch_api\\input\\raw\\Scheduling_and_Monitoring_Jobs-Handout.docx', 'content_type': 'docx', 'doc_id':                                │ │
│ │               'data\\projects\\demo_project_batch_api\\input\\raw\\Scheduling_and_Monitoring_Jobs-Handout.docx'}, token_count=252, title=None, summary=None, embedding=None,      │ │
│ │               id='26a9702ba852487692109f27fbb08e45')                                                                                                                              │ │
│ │               ]                                                                                                                                                                   │ │
│ │        path = WindowsPath('C:/git projects/Multi-Source_RAG_Platform/data/projects/demo_project_batch_api/input/chunks_docx.tsv')                                                 │ │
│ │        self = <scripts.embeddings.unified_embedder.UnifiedEmbedder object at 0x00000249FB08AF90>                                                                                  │ │
│ ╰───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯ │
│                                                                                                                                                                                       │
│ C:\git projects\Multi-Source_RAG_Platform\scripts\embeddings\unified_embedder.py:72 in run                                                                                            │
│                                                                                                                                                                                       │
│    69 │   │   │   if self.use_async_batch:                                                                                                                                            │
│    70 │   │   │   │   self.run_async_batch(doc_type, chunk_group)                                                                                                                     │
│    71 │   │   │   else:                                                                                                                                                               │
│ ❱  72 │   │   │   │   self._embed_and_store(doc_type, chunk_group)                                                                                                                    │
│    73 │                                                                                                                                                                               │
│    74 │   def _embed_and_store(self, doc_type: str, chunks: List[Chunk]) -> None:                                                                                                     │
│    75 │   │   faiss_path = self.project.get_faiss_path(doc_type)                                                                                                                      │
│                                                                                                                                                                                       │
│ ╭───────────────────────────────────────────────────────────────────────────────────── locals ──────────────────────────────────────────────────────────────────────────────────────╮ │
│ │       chunk = Chunk(doc_id='data\\projects\\demo_project_batch_api\\input\\raw\\Scheduling_and_Monitoring_Jobs-Handout.docx', text="jobs. This includes both scheduled jobs and   │ │
│ │               manual jobs, such as the ones run from Admin > Run a Job. In the Monitor Jobs History tab, you can see all the completed jobs. You can filter this list by Job      │ │
│ │               Category, Job Status, and the Submit Date Range, for example, to see all the jobs run last month. You can quickly see which jobs Completed Successfully and which   │ │
│ │               Completed with Errors. Under row actions, you can pull up the Job Report which details all the job information, or view Events to see any error messages raised     │ │
│ │               during runtime. One very convenient way to monitor jobs in Alma is to add the Scheduled Jobs Status widget to your homepage. From the Alma homepage, click the plus │ │
│ │               icon on the top right of the Alma dashboard. Select the Scheduled Jobs Status widget, and close the Manage Widgets dialog. The widget has been added to your        │ │
│ │               dashboard. You can drag and drop it to the desired location. The Scheduled Jobs Status widget presents the status of scheduled jobs for the last five days. You can │ │
│ │               select the date and Job Category to view, and immediately see the failure and success indicators. For more detailed information, click on the arrow for a given job │ │
│ │               category, and you will be redirected to the Monitor Jobs History tab, filtered to view the selected jobs. In this case, all the unsuccessful jobs, to aid with      │ │
│ │               troubleshooting. And that's how you schedule and monitor jobs in Alma. Thanks for joining!", meta={'source_filepath':                                               │ │
│ │               'data\\projects\\demo_project_batch_api\\input\\raw\\Scheduling_and_Monitoring_Jobs-Handout.docx', 'doc_type': 'docx', 'source':                                    │ │
│ │               'data\\projects\\demo_project_batch_api\\input\\raw\\Scheduling_and_Monitoring_Jobs-Handout.docx', 'content_type': 'docx', 'doc_id':                                │ │
│ │               'data\\projects\\demo_project_batch_api\\input\\raw\\Scheduling_and_Monitoring_Jobs-Handout.docx'}, token_count=252, title=None, summary=None, embedding=None,      │ │
│ │               id='26a9702ba852487692109f27fbb08e45')                                                                                                                              │ │
│ │ chunk_group = [                                                                                                                                                                   │ │
│ │               │   Chunk(doc_id='data\\projects\\demo_project_batch_api\\input\\raw\\2024 Q1 New Content Roadmap.docx', text='Q1 2024 New Content Roadmap The content team is      │ │
│ │               happy to present the content roadmap for Q1, 2024. The roadmap is planned to highlight our content operations plans for each quarter, and communicate the upcoming  │ │
│ │               expected new content plans. This list is dynamic and subject to possible changes, depending on the availability of the records and questions that may arise as we   │ │
│ │               work through the ingestion process. Currently, while we work to learn and adjust to the community needs for such a list, the table below is only a partial          │ │
│ │               representation of the new content that has been scoped for ingestion into the Ex Libris products. A "V" mark indicates that this content is planned to be ingested  │ │
│ │               to these products in the coming quarter. The full lists of ingested content continue to be available weekly as part of the relevant Release Notes. If any questions │ │
│ │               arise, please contact us via a Support Case and reference the list below. General highlights Authority vocabulary and enrichment highlights Non-English and         │ │
│ │               Regional highlights --- TABLE START --- Provider | Collections | Delivery – 360/SFX/Alma | Discovery – CDI | Notes Liverpool University Press | White Horse Press | │ │
│ │               V Eastview | CRL collections enrichment with MARC | V Edward Elgar | Encyclopedia of Tourism and Management | V Lived Places Publishing | Books collection | V Gale │ │
│ │               Primary Sources | Decolonization Politics; Making of Modern Law; Women\'s Studies Archive; State Papers Online Colonial; Times Educational Supplement | V Taylor &  │ │
│ │               Francis | Routledge Handbooks | V ASME | ASME all transactions journals | V Sage | Knowledge Video collections | V ACS | ACS In Focus Collection 3 | V ASPET |      │ │
│ │               Journal collections | V SAE | SAE Magazines | V ESA | BioOne | V', meta={'source_filepath': 'data\\projects\\demo_project_batch_api\\input\\raw\\2024 Q1 New        │ │
│ │               Content Roadmap.docx', 'doc_type': 'docx', 'source': 'data\\projects\\demo_project_batch_api\\input\\raw\\2024 Q1 New Content Roadmap.docx', 'content_type':        │ │
│ │               'docx', 'doc_id': 'data\\projects\\demo_project_batch_api\\input\\raw\\2024 Q1 New Content Roadmap.docx'}, token_count=294, title=None, summary=None,               │ │
│ │               embedding=None, id='1ce8cf43638d468cb4fef4b9f4286011'),                                                                                                             │ │
│ │               │   Chunk(doc_id='data\\projects\\demo_project_batch_api\\input\\raw\\2024 Q1 New Content Roadmap.docx', text='3 | V ASPET | Journal collections | V SAE | SAE      │ │
│ │               Magazines | V ESA | BioOne | V JSTOR | 7 collections | V | V | Idea Exchange The House Magazine | The House Magazine | V Begell House | 7 collections | V IBISWorld │ │
│ │               | Australian Industry Reports | V Beamafilm | Australian Videos | V Newsbank | Single title archives | V | Idea Exchange Adam Matthew | Royal Shakespeare Company   │ │
│ │               Archives | V | Idea Exchange EastView | Enriching Slavic and Judaica book collections | V --- TABLE END --- --- TABLE START --- Provider | Collections | Delivery – │ │
│ │               360/SFX/Alma | Discovery – CDI | Notes Homos aurus | international LGBTQ+ Authority Vocabulary | V | Carried over from Q4 2023 Idea Exchange National Authorities   │ │
│ │               of NLK | National Library of Korea Authority Vocabulary | V AIATSIS | Aboriginal and Torres Strait Islander Authority Vocabulary | V | Idea Exchange TEKA | Finnish │ │
│ │               Work and Expression Authorities | V | Idea Exchange --- TABLE END --- --- TABLE START --- Provider | Collections | Delivery – 360/SFX/Alma | Discovery – CDI |      │ │
│ │               Notes Chinese Academy of Social Sciences | National Social Sciences Database (NSSD) | V Boomportaal | Boomportaal e-journals | V Preselect | Journals | V GOKb |    │ │
│ │               BIBSAM collections | V --- TABLE END ---', meta={'source_filepath': 'data\\projects\\demo_project_batch_api\\input\\raw\\2024 Q1 New Content Roadmap.docx',         │ │
│ │               'doc_type': 'docx', 'source': 'data\\projects\\demo_project_batch_api\\input\\raw\\2024 Q1 New Content Roadmap.docx', 'content_type': 'docx', 'doc_id':             │ │
│ │               'data\\projects\\demo_project_batch_api\\input\\raw\\2024 Q1 New Content Roadmap.docx'}, token_count=224, title=None, summary=None, embedding=None,                 │ │
│ │               id='41ba614b00ce4d31983add69ec4f4b1e'),                                                                                                                             │ │
│ │               │   Chunk(doc_id='data\\projects\\demo_project_batch_api\\input\\raw\\Leganto_Integration.docx', text='Leganto Integration --- TABLE START --- Script | Direction   │ │
│ │               You can integrate campusM with Leganto, Ex Libris’s resource list management system, allowing students to access their course resource lists, and instructors to    │ │
│ │               create and manage their lists, all from their mobile device. In this session, we’ll take a quick tour of the Leganto integration, then we’ll show how to configure  │ │
│ │               the authentication, product integration instance, and live tile for the integration. | General screenshots of the Leganto PI homepage We are currently logged in as │ │
│ │               an instructor in our campusM app on web, which automatically logs us into library services, such as Leganto, as well. The Leganto tile shows us live personal       │ │
│ │               information at a glance, such as to how many lists we are subscribed, how many notifications we have, how many due dates for reading or viewing the list items, and │ │
│ │               the next due date, if applicable. Clicking on the tile takes us to Leganto. In the Lists page, you can see all your reading lists, add a new list, and open a list  │ │
│ │               to view it. When viewing a resource list, you can add items, add list sections, and perform all the editing actions on items. From the user menu, you can access    │ │
│ │               language and user settings, go to RefWorks, and use the Cite It! Widget. From the navigation menu, you can go back to lists, view your collection of items, and     │ │
│ │               find a reading list by searching your institution. This concludes our quick tour of the Leganto integration. Next, let’s see how to configure it. | campusM App All │ │
│ │               configurations for the Leganto integration are done within the App Manager.', meta={'source_filepath':                                                              │ │
│ │               'data\\projects\\demo_project_batch_api\\input\\raw\\Leganto_Integration.docx', 'doc_type': 'docx', 'source':                                                       │ │
│ │               'data\\projects\\demo_project_batch_api\\input\\raw\\Leganto_Integration.docx', 'content_type': 'docx', 'doc_id':                                                   │ │
│ │               'data\\projects\\demo_project_batch_api\\input\\raw\\Leganto_Integration.docx'}, token_count=273, title=None, summary=None, embedding=None,                         │ │
│ │               id='bcca81a2a9db4b329a4d94c1f5e4ec97'),                                                                                                                             │ │
│ │               │   Chunk(doc_id='data\\projects\\demo_project_batch_api\\input\\raw\\Leganto_Integration.docx', text='see how to configure it. | campusM App All configurations    │ │
│ │               for the Leganto integration are done within the App Manager. The first step is to configure the user’s authentication in the library. As we mentioned, users are    │ │
│ │               automatically logged in to Leganto via Alma in a single-sign-on, or SSO. For this, we need to verify that the user’s AlmaID attribute is being returned by the      │ │
│ │               identity provider, or IDP. To configure the assignment of the AlmaID from the IDP, go to App Settings > Integration Profiles, and edit the relevant integration     │ │
│ │               profile. In the integration profile editor, under Additional Mappings, make sure you populate the AlmaId with the relevant parameter in the IDP token. Note that if │ │
│ │               the app sends an invalid AlmaID to Alma, the user will not be logged in and will need to log in manually. Save your changes. | App Manager > App Settings >         │ │
│ │               Integration profile > Additional Mappings Next, let’s set up the Leganto integration. In App Manager, go to Product Integrations, and click Add Product Integration │ │
│ │               Instance. For the Product Integration Type, select Leganto. | App Manager > App Builder In this page, you can configure your Leganto integration. Select Enable     │ │
│ │               Product Integration; and provide a Description, which is the name of the integration. | Description: Course Readings In the General section, you must fill in this  │ │
│ │               information: Under Base URL, fill in the base URL of your Alma instance, which is linked to Leganto. Enter your Alma Institution Code. The Authorization Token is a │ │
│ │               secured handshake between campusM and Alma, that needs to be configured both here and in Alma. Make sure the token you enter here matches the one in Alma under     │ │
│ │               Discovery > Customer Settings > app_authorization_token.', meta={'source_filepath': 'data\\projects\\demo_project_batch_api\\input\\raw\\Leganto_Integration.docx', │ │
│ │               'doc_type': 'docx', 'source': 'data\\projects\\demo_project_batch_api\\input\\raw\\Leganto_Integration.docx', 'content_type': 'docx', 'doc_id':                     │ │
│ │               'data\\projects\\demo_project_batch_api\\input\\raw\\Leganto_Integration.docx'}, token_count=287, title=None, summary=None, embedding=None,                         │ │
│ │               id='28d1db7e36be46d7ad8cc58a083373ac'),                                                                                                                             │ │
│ │               │   Chunk(doc_id='data\\projects\\demo_project_batch_api\\input\\raw\\Leganto_Integration.docx', text='Alma. Make sure the token you enter here matches the one in  │ │
│ │               Alma under Discovery > Customer Settings > app_authorization_token. You may select a Landing Page, which is where the user is redirected when they click on the     │ │
│ │               live tile. By default, it’s your Leganto Lists page, but it can also be the Leganto Search page. In the Live Tile section, if Enabled, the live tile will be        │ │
│ │               available in the Leganto home screen, displaying personalized info; otherwise, the tile will be static. Under Live Tile Items, you can select which widgets you     │ │
│ │               would like to see in the live tile. Show Lists – displays the number of lists to which the user is subscribed. Show Notifications – displays the number of unread   │ │
│ │               notifications. Show Due Dates – displays how many items are due to be read or viewed. And Show Next Due Date – displays the next due date for an item, if           │ │
│ │               applicable. In the Prioritize Live Tile Items section, you can change the display order of the live tile items via the arrows. For the icons of the live tile       │ │
│ │               items, we will use campusM’s default icons. Alternatively, you can select to upload custom icons of your own. In the Text/Labels section, you may customize the     │ │
│ │               text labels for the various widgets. When done configuring your Leganto integration, click Save. The new Leganto integration has been created. The final step in    │ │
│ │               the deployment is to add a menu option, or tile, to the home screen, which is connected to the Leganto integration we just created. In App Manager, go to App       │ │
│ │               Builder, and add a menu option. From the available menu option types, select Product Integrations Tile. For the product integration instance, select your newly     │ │
│ │               created Leganto integration. Give the menu option a name, and click Create.', meta={'source_filepath':                                                              │ │
│ │               'data\\projects\\demo_project_batch_api\\input\\raw\\Leganto_Integration.docx', 'doc_type': 'docx', 'source':                                                       │ │
│ │               'data\\projects\\demo_project_batch_api\\input\\raw\\Leganto_Integration.docx', 'content_type': 'docx', 'doc_id':                                                   │ │
│ │               'data\\projects\\demo_project_batch_api\\input\\raw\\Leganto_Integration.docx'}, token_count=300, title=None, summary=None, embedding=None,                         │ │
│ │               id='531e15b6dc194c29908095d414c22542'),                                                                                                                             │ │
│ │               │   Chunk(doc_id='data\\projects\\demo_project_batch_api\\input\\raw\\Leganto_Integration.docx', text='For the product integration instance, select your newly      │ │
│ │               created Leganto integration. Give the menu option a name, and click Create. Our menu option has been added. You can now configure this tile, as you would with any  │ │
│ │               other tile; for example, to change its size. Our tile’s appearance has been changed. Our live tile appears blank in the preview, but the user will see it populated │ │
│ │               with their personalized data! When done configuring your tile, click Save & Publish. The tile is now published to the end-users of the app. Thanks for joining! --- │ │
│ │               TABLE END ---', meta={'source_filepath': 'data\\projects\\demo_project_batch_api\\input\\raw\\Leganto_Integration.docx', 'doc_type': 'docx', 'source':              │ │
│ │               'data\\projects\\demo_project_batch_api\\input\\raw\\Leganto_Integration.docx', 'content_type': 'docx', 'doc_id':                                                   │ │
│ │               'data\\projects\\demo_project_batch_api\\input\\raw\\Leganto_Integration.docx'}, token_count=97, title=None, summary=None, embedding=None,                          │ │
│ │               id='53de45a3f2304880a8ca04d8102f3763'),                                                                                                                             │ │
│ │               │   Chunk(doc_id='data\\projects\\demo_project_batch_api\\input\\raw\\Scheduling_and_Monitoring_Jobs-Handout.docx', text="Alma Administration – General Scheduling  │ │
│ │               and Monitoring Jobs Hi, in this session, we'll learn how to: schedule certain jobs in Alma; monitor the status of scheduled and manual jobs; and add a widget to    │ │
│ │               your homepage that shows the scheduled jobs status. Some jobs in Alma are manual jobs, which means they are run by library staff on the fly. Other jobs are         │ │
│ │               scheduled, which means they run at certain time intervals. Many jobs can be run both manually and scheduled. Among the scheduled jobs, some are scheduled by Ex     │ │
│ │               Libris and cannot be changed by the institution, while others can be scheduled by you, the Alma administrators. Primarily, the jobs you can schedule are related to │ │
│ │               Fulfillment and Acquisitions. To schedule Fulfillment related jobs, open Alma Configuration > Fulfillment > General: Fulfillment Jobs Configuration. Here you can   │ │
│ │               see and configure all the scheduled jobs related to Fulfillment; for example, the Borrowing Activity Report Job and the Send Overdue Notices Job. Each job can be   │ │
│ │               set as Active, which means it will run on schedule; or Inactive, which means it will not run on its own, but can still be run manually where available. To          │ │
│ │               configure the schedule of an Active job, open the Schedule dropdown-list and select a schedule. Different jobs offer different possible schedules. For example, the │ │
│ │               Borrowing Activity Report job can be run weekly (on the selected day), monthly (on the selected date), or not run on schedule at all. Note that depending on your   │ │
│ │               region and settings, you may see different scheduling options available here. Some jobs can be run manually by clicking Run Now.", meta={'source_filepath':         │ │
│ │               'data\\projects\\demo_project_batch_api\\input\\raw\\Scheduling_and_Monitoring_Jobs-Handout.docx', 'doc_type': 'docx', 'source':                                    │ │
│ │               'data\\projects\\demo_project_batch_api\\input\\raw\\Scheduling_and_Monitoring_Jobs-Handout.docx', 'content_type': 'docx', 'doc_id':                                │ │
│ │               'data\\projects\\demo_project_batch_api\\input\\raw\\Scheduling_and_Monitoring_Jobs-Handout.docx'}, token_count=269, title=None, summary=None, embedding=None,      │ │
│ │               id='c5d98d40120b4a4a994f0f34f6a1a3b3'),                                                                                                                             │ │
│ │               │   Chunk(doc_id='data\\projects\\demo_project_batch_api\\input\\raw\\Scheduling_and_Monitoring_Jobs-Handout.docx', text="and settings, you may see different       │ │
│ │               scheduling options available here. Some jobs can be run manually by clicking Run Now. There are other job-specific configurations you can make on this page. For    │ │
│ │               example, in the Anonymization job you can decide which fulfillment activities will have their identifying user information scrubbed when certain conditions are     │ │
│ │               met. When done configuring the jobs, click Save. Acquisitions related jobs can be configured under Alma Configuration > Acquisitions > General: Acquisition Jobs    │ │
│ │               Configuration. Here you can configure the PO Line package job and the SUSHI harvesting job. Resource Management jobs can be configured in a similar page. Now let's │ │
│ │               see how you can monitor the statuses of all jobs in Alma. Go back to Alma > Admin > Manage Jobs and Sets: Monitor Jobs. In the Scheduled tab, you can see all your  │ │
│ │               upcoming scheduled jobs, whether scheduled by library staff or Ex Libris. You can filter this page by Job Category, for example to see only Fulfillment jobs. For   │ │
│ │               each job, you can see whether it's active, what its schedule is, and when is the next scheduled run. Under row actions, you can select to view the Job History of   │ │
│ │               previous runs. And if you wish to receive email notifications when this job is run, you can add yourself and other users as subscribers. In the Monitor Jobs        │ │
│ │               Running tab, you can follow the progress of currently running jobs. This includes both scheduled jobs and manual jobs, such as the ones run from Admin > Run a      │ │
│ │               Job.", meta={'source_filepath': 'data\\projects\\demo_project_batch_api\\input\\raw\\Scheduling_and_Monitoring_Jobs-Handout.docx', 'doc_type': 'docx', 'source':    │ │
│ │               'data\\projects\\demo_project_batch_api\\input\\raw\\Scheduling_and_Monitoring_Jobs-Handout.docx', 'content_type': 'docx', 'doc_id':                                │ │
│ │               'data\\projects\\demo_project_batch_api\\input\\raw\\Scheduling_and_Monitoring_Jobs-Handout.docx'}, token_count=254, title=None, summary=None, embedding=None,      │ │
│ │               id='b7f05718a631410ca92d8b86b83baaa0'),                                                                                                                             │ │
│ │               │   Chunk(doc_id='data\\projects\\demo_project_batch_api\\input\\raw\\Scheduling_and_Monitoring_Jobs-Handout.docx', text="jobs. This includes both scheduled jobs   │ │
│ │               and manual jobs, such as the ones run from Admin > Run a Job. In the Monitor Jobs History tab, you can see all the completed jobs. You can filter this list by Job  │ │
│ │               Category, Job Status, and the Submit Date Range, for example, to see all the jobs run last month. You can quickly see which jobs Completed Successfully and which   │ │
│ │               Completed with Errors. Under row actions, you can pull up the Job Report which details all the job information, or view Events to see any error messages raised     │ │
│ │               during runtime. One very convenient way to monitor jobs in Alma is to add the Scheduled Jobs Status widget to your homepage. From the Alma homepage, click the plus │ │
│ │               icon on the top right of the Alma dashboard. Select the Scheduled Jobs Status widget, and close the Manage Widgets dialog. The widget has been added to your        │ │
│ │               dashboard. You can drag and drop it to the desired location. The Scheduled Jobs Status widget presents the status of scheduled jobs for the last five days. You can │ │
│ │               select the date and Job Category to view, and immediately see the failure and success indicators. For more detailed information, click on the arrow for a given job │ │
│ │               category, and you will be redirected to the Monitor Jobs History tab, filtered to view the selected jobs. In this case, all the unsuccessful jobs, to aid with      │ │
│ │               troubleshooting. And that's how you schedule and monitor jobs in Alma. Thanks for joining!", meta={'source_filepath':                                               │ │
│ │               'data\\projects\\demo_project_batch_api\\input\\raw\\Scheduling_and_Monitoring_Jobs-Handout.docx', 'doc_type': 'docx', 'source':                                    │ │
│ │               'data\\projects\\demo_project_batch_api\\input\\raw\\Scheduling_and_Monitoring_Jobs-Handout.docx', 'content_type': 'docx', 'doc_id':                                │ │
│ │               'data\\projects\\demo_project_batch_api\\input\\raw\\Scheduling_and_Monitoring_Jobs-Handout.docx'}, token_count=252, title=None, summary=None, embedding=None,      │ │
│ │               id='26a9702ba852487692109f27fbb08e45')                                                                                                                              │ │
│ │               ]                                                                                                                                                                   │ │
│ │      chunks = [                                                                                                                                                                   │ │
│ │               │   Chunk(doc_id='data\\projects\\demo_project_batch_api\\input\\raw\\2024 Q1 New Content Roadmap.docx', text='Q1 2024 New Content Roadmap The content team is      │ │
│ │               happy to present the content roadmap for Q1, 2024. The roadmap is planned to highlight our content operations plans for each quarter, and communicate the upcoming  │ │
│ │               expected new content plans. This list is dynamic and subject to possible changes, depending on the availability of the records and questions that may arise as we   │ │
│ │               work through the ingestion process. Currently, while we work to learn and adjust to the community needs for such a list, the table below is only a partial          │ │
│ │               representation of the new content that has been scoped for ingestion into the Ex Libris products. A "V" mark indicates that this content is planned to be ingested  │ │
│ │               to these products in the coming quarter. The full lists of ingested content continue to be available weekly as part of the relevant Release Notes. If any questions │ │
│ │               arise, please contact us via a Support Case and reference the list below. General highlights Authority vocabulary and enrichment highlights Non-English and         │ │
│ │               Regional highlights --- TABLE START --- Provider | Collections | Delivery – 360/SFX/Alma | Discovery – CDI | Notes Liverpool University Press | White Horse Press | │ │
│ │               V Eastview | CRL collections enrichment with MARC | V Edward Elgar | Encyclopedia of Tourism and Management | V Lived Places Publishing | Books collection | V Gale │ │
│ │               Primary Sources | Decolonization Politics; Making of Modern Law; Women\'s Studies Archive; State Papers Online Colonial; Times Educational Supplement | V Taylor &  │ │
│ │               Francis | Routledge Handbooks | V ASME | ASME all transactions journals | V Sage | Knowledge Video collections | V ACS | ACS In Focus Collection 3 | V ASPET |      │ │
│ │               Journal collections | V SAE | SAE Magazines | V ESA | BioOne | V', meta={'source_filepath': 'data\\projects\\demo_project_batch_api\\input\\raw\\2024 Q1 New        │ │
│ │               Content Roadmap.docx', 'doc_type': 'docx', 'source': 'data\\projects\\demo_project_batch_api\\input\\raw\\2024 Q1 New Content Roadmap.docx', 'content_type':        │ │
│ │               'docx', 'doc_id': 'data\\projects\\demo_project_batch_api\\input\\raw\\2024 Q1 New Content Roadmap.docx'}, token_count=294, title=None, summary=None,               │ │
│ │               embedding=None, id='1ce8cf43638d468cb4fef4b9f4286011'),                                                                                                             │ │
│ │               │   Chunk(doc_id='data\\projects\\demo_project_batch_api\\input\\raw\\2024 Q1 New Content Roadmap.docx', text='3 | V ASPET | Journal collections | V SAE | SAE      │ │
│ │               Magazines | V ESA | BioOne | V JSTOR | 7 collections | V | V | Idea Exchange The House Magazine | The House Magazine | V Begell House | 7 collections | V IBISWorld │ │
│ │               | Australian Industry Reports | V Beamafilm | Australian Videos | V Newsbank | Single title archives | V | Idea Exchange Adam Matthew | Royal Shakespeare Company   │ │
│ │               Archives | V | Idea Exchange EastView | Enriching Slavic and Judaica book collections | V --- TABLE END --- --- TABLE START --- Provider | Collections | Delivery – │ │
│ │               360/SFX/Alma | Discovery – CDI | Notes Homos aurus | international LGBTQ+ Authority Vocabulary | V | Carried over from Q4 2023 Idea Exchange National Authorities   │ │
│ │               of NLK | National Library of Korea Authority Vocabulary | V AIATSIS | Aboriginal and Torres Strait Islander Authority Vocabulary | V | Idea Exchange TEKA | Finnish │ │
│ │               Work and Expression Authorities | V | Idea Exchange --- TABLE END --- --- TABLE START --- Provider | Collections | Delivery – 360/SFX/Alma | Discovery – CDI |      │ │
│ │               Notes Chinese Academy of Social Sciences | National Social Sciences Database (NSSD) | V Boomportaal | Boomportaal e-journals | V Preselect | Journals | V GOKb |    │ │
│ │               BIBSAM collections | V --- TABLE END ---', meta={'source_filepath': 'data\\projects\\demo_project_batch_api\\input\\raw\\2024 Q1 New Content Roadmap.docx',         │ │
│ │               'doc_type': 'docx', 'source': 'data\\projects\\demo_project_batch_api\\input\\raw\\2024 Q1 New Content Roadmap.docx', 'content_type': 'docx', 'doc_id':             │ │
│ │               'data\\projects\\demo_project_batch_api\\input\\raw\\2024 Q1 New Content Roadmap.docx'}, token_count=224, title=None, summary=None, embedding=None,                 │ │
│ │               id='41ba614b00ce4d31983add69ec4f4b1e'),                                                                                                                             │ │
│ │               │   Chunk(doc_id='data\\projects\\demo_project_batch_api\\input\\raw\\Leganto_Integration.docx', text='Leganto Integration --- TABLE START --- Script | Direction   │ │
│ │               You can integrate campusM with Leganto, Ex Libris’s resource list management system, allowing students to access their course resource lists, and instructors to    │ │
│ │               create and manage their lists, all from their mobile device. In this session, we’ll take a quick tour of the Leganto integration, then we’ll show how to configure  │ │
│ │               the authentication, product integration instance, and live tile for the integration. | General screenshots of the Leganto PI homepage We are currently logged in as │ │
│ │               an instructor in our campusM app on web, which automatically logs us into library services, such as Leganto, as well. The Leganto tile shows us live personal       │ │
│ │               information at a glance, such as to how many lists we are subscribed, how many notifications we have, how many due dates for reading or viewing the list items, and │ │
│ │               the next due date, if applicable. Clicking on the tile takes us to Leganto. In the Lists page, you can see all your reading lists, add a new list, and open a list  │ │
│ │               to view it. When viewing a resource list, you can add items, add list sections, and perform all the editing actions on items. From the user menu, you can access    │ │
│ │               language and user settings, go to RefWorks, and use the Cite It! Widget. From the navigation menu, you can go back to lists, view your collection of items, and     │ │
│ │               find a reading list by searching your institution. This concludes our quick tour of the Leganto integration. Next, let’s see how to configure it. | campusM App All │ │
│ │               configurations for the Leganto integration are done within the App Manager.', meta={'source_filepath':                                                              │ │
│ │               'data\\projects\\demo_project_batch_api\\input\\raw\\Leganto_Integration.docx', 'doc_type': 'docx', 'source':                                                       │ │
│ │               'data\\projects\\demo_project_batch_api\\input\\raw\\Leganto_Integration.docx', 'content_type': 'docx', 'doc_id':                                                   │ │
│ │               'data\\projects\\demo_project_batch_api\\input\\raw\\Leganto_Integration.docx'}, token_count=273, title=None, summary=None, embedding=None,                         │ │
│ │               id='bcca81a2a9db4b329a4d94c1f5e4ec97'),                                                                                                                             │ │
│ │               │   Chunk(doc_id='data\\projects\\demo_project_batch_api\\input\\raw\\Leganto_Integration.docx', text='see how to configure it. | campusM App All configurations    │ │
│ │               for the Leganto integration are done within the App Manager. The first step is to configure the user’s authentication in the library. As we mentioned, users are    │ │
│ │               automatically logged in to Leganto via Alma in a single-sign-on, or SSO. For this, we need to verify that the user’s AlmaID attribute is being returned by the      │ │
│ │               identity provider, or IDP. To configure the assignment of the AlmaID from the IDP, go to App Settings > Integration Profiles, and edit the relevant integration     │ │
│ │               profile. In the integration profile editor, under Additional Mappings, make sure you populate the AlmaId with the relevant parameter in the IDP token. Note that if │ │
│ │               the app sends an invalid AlmaID to Alma, the user will not be logged in and will need to log in manually. Save your changes. | App Manager > App Settings >         │ │
│ │               Integration profile > Additional Mappings Next, let’s set up the Leganto integration. In App Manager, go to Product Integrations, and click Add Product Integration │ │
│ │               Instance. For the Product Integration Type, select Leganto. | App Manager > App Builder In this page, you can configure your Leganto integration. Select Enable     │ │
│ │               Product Integration; and provide a Description, which is the name of the integration. | Description: Course Readings In the General section, you must fill in this  │ │
│ │               information: Under Base URL, fill in the base URL of your Alma instance, which is linked to Leganto. Enter your Alma Institution Code. The Authorization Token is a │ │
│ │               secured handshake between campusM and Alma, that needs to be configured both here and in Alma. Make sure the token you enter here matches the one in Alma under     │ │
│ │               Discovery > Customer Settings > app_authorization_token.', meta={'source_filepath': 'data\\projects\\demo_project_batch_api\\input\\raw\\Leganto_Integration.docx', │ │
│ │               'doc_type': 'docx', 'source': 'data\\projects\\demo_project_batch_api\\input\\raw\\Leganto_Integration.docx', 'content_type': 'docx', 'doc_id':                     │ │
│ │               'data\\projects\\demo_project_batch_api\\input\\raw\\Leganto_Integration.docx'}, token_count=287, title=None, summary=None, embedding=None,                         │ │
│ │               id='28d1db7e36be46d7ad8cc58a083373ac'),                                                                                                                             │ │
│ │               │   Chunk(doc_id='data\\projects\\demo_project_batch_api\\input\\raw\\Leganto_Integration.docx', text='Alma. Make sure the token you enter here matches the one in  │ │
│ │               Alma under Discovery > Customer Settings > app_authorization_token. You may select a Landing Page, which is where the user is redirected when they click on the     │ │
│ │               live tile. By default, it’s your Leganto Lists page, but it can also be the Leganto Search page. In the Live Tile section, if Enabled, the live tile will be        │ │
│ │               available in the Leganto home screen, displaying personalized info; otherwise, the tile will be static. Under Live Tile Items, you can select which widgets you     │ │
│ │               would like to see in the live tile. Show Lists – displays the number of lists to which the user is subscribed. Show Notifications – displays the number of unread   │ │
│ │               notifications. Show Due Dates – displays how many items are due to be read or viewed. And Show Next Due Date – displays the next due date for an item, if           │ │
│ │               applicable. In the Prioritize Live Tile Items section, you can change the display order of the live tile items via the arrows. For the icons of the live tile       │ │
│ │               items, we will use campusM’s default icons. Alternatively, you can select to upload custom icons of your own. In the Text/Labels section, you may customize the     │ │
│ │               text labels for the various widgets. When done configuring your Leganto integration, click Save. The new Leganto integration has been created. The final step in    │ │
│ │               the deployment is to add a menu option, or tile, to the home screen, which is connected to the Leganto integration we just created. In App Manager, go to App       │ │
│ │               Builder, and add a menu option. From the available menu option types, select Product Integrations Tile. For the product integration instance, select your newly     │ │
│ │               created Leganto integration. Give the menu option a name, and click Create.', meta={'source_filepath':                                                              │ │
│ │               'data\\projects\\demo_project_batch_api\\input\\raw\\Leganto_Integration.docx', 'doc_type': 'docx', 'source':                                                       │ │
│ │               'data\\projects\\demo_project_batch_api\\input\\raw\\Leganto_Integration.docx', 'content_type': 'docx', 'doc_id':                                                   │ │
│ │               'data\\projects\\demo_project_batch_api\\input\\raw\\Leganto_Integration.docx'}, token_count=300, title=None, summary=None, embedding=None,                         │ │
│ │               id='531e15b6dc194c29908095d414c22542'),                                                                                                                             │ │
│ │               │   Chunk(doc_id='data\\projects\\demo_project_batch_api\\input\\raw\\Leganto_Integration.docx', text='For the product integration instance, select your newly      │ │
│ │               created Leganto integration. Give the menu option a name, and click Create. Our menu option has been added. You can now configure this tile, as you would with any  │ │
│ │               other tile; for example, to change its size. Our tile’s appearance has been changed. Our live tile appears blank in the preview, but the user will see it populated │ │
│ │               with their personalized data! When done configuring your tile, click Save & Publish. The tile is now published to the end-users of the app. Thanks for joining! --- │ │
│ │               TABLE END ---', meta={'source_filepath': 'data\\projects\\demo_project_batch_api\\input\\raw\\Leganto_Integration.docx', 'doc_type': 'docx', 'source':              │ │
│ │               'data\\projects\\demo_project_batch_api\\input\\raw\\Leganto_Integration.docx', 'content_type': 'docx', 'doc_id':                                                   │ │
│ │               'data\\projects\\demo_project_batch_api\\input\\raw\\Leganto_Integration.docx'}, token_count=97, title=None, summary=None, embedding=None,                          │ │
│ │               id='53de45a3f2304880a8ca04d8102f3763'),                                                                                                                             │ │
│ │               │   Chunk(doc_id='data\\projects\\demo_project_batch_api\\input\\raw\\Scheduling_and_Monitoring_Jobs-Handout.docx', text="Alma Administration – General Scheduling  │ │
│ │               and Monitoring Jobs Hi, in this session, we'll learn how to: schedule certain jobs in Alma; monitor the status of scheduled and manual jobs; and add a widget to    │ │
│ │               your homepage that shows the scheduled jobs status. Some jobs in Alma are manual jobs, which means they are run by library staff on the fly. Other jobs are         │ │
│ │               scheduled, which means they run at certain time intervals. Many jobs can be run both manually and scheduled. Among the scheduled jobs, some are scheduled by Ex     │ │
│ │               Libris and cannot be changed by the institution, while others can be scheduled by you, the Alma administrators. Primarily, the jobs you can schedule are related to │ │
│ │               Fulfillment and Acquisitions. To schedule Fulfillment related jobs, open Alma Configuration > Fulfillment > General: Fulfillment Jobs Configuration. Here you can   │ │
│ │               see and configure all the scheduled jobs related to Fulfillment; for example, the Borrowing Activity Report Job and the Send Overdue Notices Job. Each job can be   │ │
│ │               set as Active, which means it will run on schedule; or Inactive, which means it will not run on its own, but can still be run manually where available. To          │ │
│ │               configure the schedule of an Active job, open the Schedule dropdown-list and select a schedule. Different jobs offer different possible schedules. For example, the │ │
│ │               Borrowing Activity Report job can be run weekly (on the selected day), monthly (on the selected date), or not run on schedule at all. Note that depending on your   │ │
│ │               region and settings, you may see different scheduling options available here. Some jobs can be run manually by clicking Run Now.", meta={'source_filepath':         │ │
│ │               'data\\projects\\demo_project_batch_api\\input\\raw\\Scheduling_and_Monitoring_Jobs-Handout.docx', 'doc_type': 'docx', 'source':                                    │ │
│ │               'data\\projects\\demo_project_batch_api\\input\\raw\\Scheduling_and_Monitoring_Jobs-Handout.docx', 'content_type': 'docx', 'doc_id':                                │ │
│ │               'data\\projects\\demo_project_batch_api\\input\\raw\\Scheduling_and_Monitoring_Jobs-Handout.docx'}, token_count=269, title=None, summary=None, embedding=None,      │ │
│ │               id='c5d98d40120b4a4a994f0f34f6a1a3b3'),                                                                                                                             │ │
│ │               │   Chunk(doc_id='data\\projects\\demo_project_batch_api\\input\\raw\\Scheduling_and_Monitoring_Jobs-Handout.docx', text="and settings, you may see different       │ │
│ │               scheduling options available here. Some jobs can be run manually by clicking Run Now. There are other job-specific configurations you can make on this page. For    │ │
│ │               example, in the Anonymization job you can decide which fulfillment activities will have their identifying user information scrubbed when certain conditions are     │ │
│ │               met. When done configuring the jobs, click Save. Acquisitions related jobs can be configured under Alma Configuration > Acquisitions > General: Acquisition Jobs    │ │
│ │               Configuration. Here you can configure the PO Line package job and the SUSHI harvesting job. Resource Management jobs can be configured in a similar page. Now let's │ │
│ │               see how you can monitor the statuses of all jobs in Alma. Go back to Alma > Admin > Manage Jobs and Sets: Monitor Jobs. In the Scheduled tab, you can see all your  │ │
│ │               upcoming scheduled jobs, whether scheduled by library staff or Ex Libris. You can filter this page by Job Category, for example to see only Fulfillment jobs. For   │ │
│ │               each job, you can see whether it's active, what its schedule is, and when is the next scheduled run. Under row actions, you can select to view the Job History of   │ │
│ │               previous runs. And if you wish to receive email notifications when this job is run, you can add yourself and other users as subscribers. In the Monitor Jobs        │ │
│ │               Running tab, you can follow the progress of currently running jobs. This includes both scheduled jobs and manual jobs, such as the ones run from Admin > Run a      │ │
│ │               Job.", meta={'source_filepath': 'data\\projects\\demo_project_batch_api\\input\\raw\\Scheduling_and_Monitoring_Jobs-Handout.docx', 'doc_type': 'docx', 'source':    │ │
│ │               'data\\projects\\demo_project_batch_api\\input\\raw\\Scheduling_and_Monitoring_Jobs-Handout.docx', 'content_type': 'docx', 'doc_id':                                │ │
│ │               'data\\projects\\demo_project_batch_api\\input\\raw\\Scheduling_and_Monitoring_Jobs-Handout.docx'}, token_count=254, title=None, summary=None, embedding=None,      │ │
│ │               id='b7f05718a631410ca92d8b86b83baaa0'),                                                                                                                             │ │
│ │               │   Chunk(doc_id='data\\projects\\demo_project_batch_api\\input\\raw\\Scheduling_and_Monitoring_Jobs-Handout.docx', text="jobs. This includes both scheduled jobs   │ │
│ │               and manual jobs, such as the ones run from Admin > Run a Job. In the Monitor Jobs History tab, you can see all the completed jobs. You can filter this list by Job  │ │
│ │               Category, Job Status, and the Submit Date Range, for example, to see all the jobs run last month. You can quickly see which jobs Completed Successfully and which   │ │
│ │               Completed with Errors. Under row actions, you can pull up the Job Report which details all the job information, or view Events to see any error messages raised     │ │
│ │               during runtime. One very convenient way to monitor jobs in Alma is to add the Scheduled Jobs Status widget to your homepage. From the Alma homepage, click the plus │ │
│ │               icon on the top right of the Alma dashboard. Select the Scheduled Jobs Status widget, and close the Manage Widgets dialog. The widget has been added to your        │ │
│ │               dashboard. You can drag and drop it to the desired location. The Scheduled Jobs Status widget presents the status of scheduled jobs for the last five days. You can │ │
│ │               select the date and Job Category to view, and immediately see the failure and success indicators. For more detailed information, click on the arrow for a given job │ │
│ │               category, and you will be redirected to the Monitor Jobs History tab, filtered to view the selected jobs. In this case, all the unsuccessful jobs, to aid with      │ │
│ │               troubleshooting. And that's how you schedule and monitor jobs in Alma. Thanks for joining!", meta={'source_filepath':                                               │ │
│ │               'data\\projects\\demo_project_batch_api\\input\\raw\\Scheduling_and_Monitoring_Jobs-Handout.docx', 'doc_type': 'docx', 'source':                                    │ │
│ │               'data\\projects\\demo_project_batch_api\\input\\raw\\Scheduling_and_Monitoring_Jobs-Handout.docx', 'content_type': 'docx', 'doc_id':                                │ │
│ │               'data\\projects\\demo_project_batch_api\\input\\raw\\Scheduling_and_Monitoring_Jobs-Handout.docx'}, token_count=252, title=None, summary=None, embedding=None,      │ │
│ │               id='26a9702ba852487692109f27fbb08e45')                                                                                                                              │ │
│ │               ]                                                                                                                                                                   │ │
│ │    doc_type = 'docx'                                                                                                                                                              │ │
│ │     grouped = {                                                                                                                                                                   │ │
│ │               │   'docx': [                                                                                                                                                       │ │
│ │               │   │   Chunk(doc_id='data\\projects\\demo_project_batch_api\\input\\raw\\2024 Q1 New Content Roadmap.docx', text='Q1 2024 New Content Roadmap The content team is  │ │
│ │               happy to present the content roadmap for Q1, 2024. The roadmap is planned to highlight our content operations plans for each quarter, and communicate the upcoming  │ │
│ │               expected new content plans. This list is dynamic and subject to possible changes, depending on the availability of the records and questions that may arise as we   │ │
│ │               work through the ingestion process. Currently, while we work to learn and adjust to the community needs for such a list, the table below is only a partial          │ │
│ │               representation of the new content that has been scoped for ingestion into the Ex Libris products. A "V" mark indicates that this content is planned to be ingested  │ │
│ │               to these products in the coming quarter. The full lists of ingested content continue to be available weekly as part of the relevant Release Notes. If any questions │ │
│ │               arise, please contact us via a Support Case and reference the list below. General highlights Authority vocabulary and enrichment highlights Non-English and         │ │
│ │               Regional highlights --- TABLE START --- Provider | Collections | Delivery – 360/SFX/Alma | Discovery – CDI | Notes Liverpool University Press | White Horse Press | │ │
│ │               V Eastview | CRL collections enrichment with MARC | V Edward Elgar | Encyclopedia of Tourism and Management | V Lived Places Publishing | Books collection | V Gale │ │
│ │               Primary Sources | Decolonization Politics; Making of Modern Law; Women\'s Studies Archive; State Papers Online Colonial; Times Educational Supplement | V Taylor &  │ │
│ │               Francis | Routledge Handbooks | V ASME | ASME all transactions journals | V Sage | Knowledge Video collections | V ACS | ACS In Focus Collection 3 | V ASPET |      │ │
│ │               Journal collections | V SAE | SAE Magazines | V ESA | BioOne | V', meta={'source_filepath': 'data\\projects\\demo_project_batch_api\\input\\raw\\2024 Q1 New        │ │
│ │               Content Roadmap.docx', 'doc_type': 'docx', 'source': 'data\\projects\\demo_project_batch_api\\input\\raw\\2024 Q1 New Content Roadmap.docx', 'content_type':        │ │
│ │               'docx', 'doc_id': 'data\\projects\\demo_project_batch_api\\input\\raw\\2024 Q1 New Content Roadmap.docx'}, token_count=294, title=None, summary=None,               │ │
│ │               embedding=None, id='1ce8cf43638d468cb4fef4b9f4286011'),                                                                                                             │ │
│ │               │   │   Chunk(doc_id='data\\projects\\demo_project_batch_api\\input\\raw\\2024 Q1 New Content Roadmap.docx', text='3 | V ASPET | Journal collections | V SAE | SAE  │ │
│ │               Magazines | V ESA | BioOne | V JSTOR | 7 collections | V | V | Idea Exchange The House Magazine | The House Magazine | V Begell House | 7 collections | V IBISWorld │ │
│ │               | Australian Industry Reports | V Beamafilm | Australian Videos | V Newsbank | Single title archives | V | Idea Exchange Adam Matthew | Royal Shakespeare Company   │ │
│ │               Archives | V | Idea Exchange EastView | Enriching Slavic and Judaica book collections | V --- TABLE END --- --- TABLE START --- Provider | Collections | Delivery – │ │
│ │               360/SFX/Alma | Discovery – CDI | Notes Homos aurus | international LGBTQ+ Authority Vocabulary | V | Carried over from Q4 2023 Idea Exchange National Authorities   │ │
│ │               of NLK | National Library of Korea Authority Vocabulary | V AIATSIS | Aboriginal and Torres Strait Islander Authority Vocabulary | V | Idea Exchange TEKA | Finnish │ │
│ │               Work and Expression Authorities | V | Idea Exchange --- TABLE END --- --- TABLE START --- Provider | Collections | Delivery – 360/SFX/Alma | Discovery – CDI |      │ │
│ │               Notes Chinese Academy of Social Sciences | National Social Sciences Database (NSSD) | V Boomportaal | Boomportaal e-journals | V Preselect | Journals | V GOKb |    │ │
│ │               BIBSAM collections | V --- TABLE END ---', meta={'source_filepath': 'data\\projects\\demo_project_batch_api\\input\\raw\\2024 Q1 New Content Roadmap.docx',         │ │
│ │               'doc_type': 'docx', 'source': 'data\\projects\\demo_project_batch_api\\input\\raw\\2024 Q1 New Content Roadmap.docx', 'content_type': 'docx', 'doc_id':             │ │
│ │               'data\\projects\\demo_project_batch_api\\input\\raw\\2024 Q1 New Content Roadmap.docx'}, token_count=224, title=None, summary=None, embedding=None,                 │ │
│ │               id='41ba614b00ce4d31983add69ec4f4b1e'),                                                                                                                             │ │
│ │               │   │   Chunk(doc_id='data\\projects\\demo_project_batch_api\\input\\raw\\Leganto_Integration.docx', text='Leganto Integration --- TABLE START --- Script |         │ │
│ │               Direction You can integrate campusM with Leganto, Ex Libris’s resource list management system, allowing students to access their course resource lists, and         │ │
│ │               instructors to create and manage their lists, all from their mobile device. In this session, we’ll take a quick tour of the Leganto integration, then we’ll show    │ │
│ │               how to configure the authentication, product integration instance, and live tile for the integration. | General screenshots of the Leganto PI homepage We are       │ │
│ │               currently logged in as an instructor in our campusM app on web, which automatically logs us into library services, such as Leganto, as well. The Leganto tile shows │ │
│ │               us live personal information at a glance, such as to how many lists we are subscribed, how many notifications we have, how many due dates for reading or viewing    │ │
│ │               the list items, and the next due date, if applicable. Clicking on the tile takes us to Leganto. In the Lists page, you can see all your reading lists, add a new    │ │
│ │               list, and open a list to view it. When viewing a resource list, you can add items, add list sections, and perform all the editing actions on items. From the user   │ │
│ │               menu, you can access language and user settings, go to RefWorks, and use the Cite It! Widget. From the navigation menu, you can go back to lists, view your         │ │
│ │               collection of items, and find a reading list by searching your institution. This concludes our quick tour of the Leganto integration. Next, let’s see how to        │ │
│ │               configure it. | campusM App All configurations for the Leganto integration are done within the App Manager.', meta={'source_filepath':                              │ │
│ │               'data\\projects\\demo_project_batch_api\\input\\raw\\Leganto_Integration.docx', 'doc_type': 'docx', 'source':                                                       │ │
│ │               'data\\projects\\demo_project_batch_api\\input\\raw\\Leganto_Integration.docx', 'content_type': 'docx', 'doc_id':                                                   │ │
│ │               'data\\projects\\demo_project_batch_api\\input\\raw\\Leganto_Integration.docx'}, token_count=273, title=None, summary=None, embedding=None,                         │ │
│ │               id='bcca81a2a9db4b329a4d94c1f5e4ec97'),                                                                                                                             │ │
│ │               │   │   Chunk(doc_id='data\\projects\\demo_project_batch_api\\input\\raw\\Leganto_Integration.docx', text='see how to configure it. | campusM App All               │ │
│ │               configurations for the Leganto integration are done within the App Manager. The first step is to configure the user’s authentication in the library. As we          │ │
│ │               mentioned, users are automatically logged in to Leganto via Alma in a single-sign-on, or SSO. For this, we need to verify that the user’s AlmaID attribute is being │ │
│ │               returned by the identity provider, or IDP. To configure the assignment of the AlmaID from the IDP, go to App Settings > Integration Profiles, and edit the relevant │ │
│ │               integration profile. In the integration profile editor, under Additional Mappings, make sure you populate the AlmaId with the relevant parameter in the IDP token.  │ │
│ │               Note that if the app sends an invalid AlmaID to Alma, the user will not be logged in and will need to log in manually. Save your changes. | App Manager > App       │ │
│ │               Settings > Integration profile > Additional Mappings Next, let’s set up the Leganto integration. In App Manager, go to Product Integrations, and click Add Product  │ │
│ │               Integration Instance. For the Product Integration Type, select Leganto. | App Manager > App Builder In this page, you can configure your Leganto integration.       │ │
│ │               Select Enable Product Integration; and provide a Description, which is the name of the integration. | Description: Course Readings In the General section, you must │ │
│ │               fill in this information: Under Base URL, fill in the base URL of your Alma instance, which is linked to Leganto. Enter your Alma Institution Code. The             │ │
│ │               Authorization Token is a secured handshake between campusM and Alma, that needs to be configured both here and in Alma. Make sure the token you enter here matches  │ │
│ │               the one in Alma under Discovery > Customer Settings > app_authorization_token.', meta={'source_filepath':                                                           │ │
│ │               'data\\projects\\demo_project_batch_api\\input\\raw\\Leganto_Integration.docx', 'doc_type': 'docx', 'source':                                                       │ │
│ │               'data\\projects\\demo_project_batch_api\\input\\raw\\Leganto_Integration.docx', 'content_type': 'docx', 'doc_id':                                                   │ │
│ │               'data\\projects\\demo_project_batch_api\\input\\raw\\Leganto_Integration.docx'}, token_count=287, title=None, summary=None, embedding=None,                         │ │
│ │               id='28d1db7e36be46d7ad8cc58a083373ac'),                                                                                                                             │ │
│ │               │   │   Chunk(doc_id='data\\projects\\demo_project_batch_api\\input\\raw\\Leganto_Integration.docx', text='Alma. Make sure the token you enter here matches the one │ │
│ │               in Alma under Discovery > Customer Settings > app_authorization_token. You may select a Landing Page, which is where the user is redirected when they click on the  │ │
│ │               live tile. By default, it’s your Leganto Lists page, but it can also be the Leganto Search page. In the Live Tile section, if Enabled, the live tile will be        │ │
│ │               available in the Leganto home screen, displaying personalized info; otherwise, the tile will be static. Under Live Tile Items, you can select which widgets you     │ │
│ │               would like to see in the live tile. Show Lists – displays the number of lists to which the user is subscribed. Show Notifications – displays the number of unread   │ │
│ │               notifications. Show Due Dates – displays how many items are due to be read or viewed. And Show Next Due Date – displays the next due date for an item, if           │ │
│ │               applicable. In the Prioritize Live Tile Items section, you can change the display order of the live tile items via the arrows. For the icons of the live tile       │ │
│ │               items, we will use campusM’s default icons. Alternatively, you can select to upload custom icons of your own. In the Text/Labels section, you may customize the     │ │
│ │               text labels for the various widgets. When done configuring your Leganto integration, click Save. The new Leganto integration has been created. The final step in    │ │
│ │               the deployment is to add a menu option, or tile, to the home screen, which is connected to the Leganto integration we just created. In App Manager, go to App       │ │
│ │               Builder, and add a menu option. From the available menu option types, select Product Integrations Tile. For the product integration instance, select your newly     │ │
│ │               created Leganto integration. Give the menu option a name, and click Create.', meta={'source_filepath':                                                              │ │
│ │               'data\\projects\\demo_project_batch_api\\input\\raw\\Leganto_Integration.docx', 'doc_type': 'docx', 'source':                                                       │ │
│ │               'data\\projects\\demo_project_batch_api\\input\\raw\\Leganto_Integration.docx', 'content_type': 'docx', 'doc_id':                                                   │ │
│ │               'data\\projects\\demo_project_batch_api\\input\\raw\\Leganto_Integration.docx'}, token_count=300, title=None, summary=None, embedding=None,                         │ │
│ │               id='531e15b6dc194c29908095d414c22542'),                                                                                                                             │ │
│ │               │   │   Chunk(doc_id='data\\projects\\demo_project_batch_api\\input\\raw\\Leganto_Integration.docx', text='For the product integration instance, select your newly  │ │
│ │               created Leganto integration. Give the menu option a name, and click Create. Our menu option has been added. You can now configure this tile, as you would with any  │ │
│ │               other tile; for example, to change its size. Our tile’s appearance has been changed. Our live tile appears blank in the preview, but the user will see it populated │ │
│ │               with their personalized data! When done configuring your tile, click Save & Publish. The tile is now published to the end-users of the app. Thanks for joining! --- │ │
│ │               TABLE END ---', meta={'source_filepath': 'data\\projects\\demo_project_batch_api\\input\\raw\\Leganto_Integration.docx', 'doc_type': 'docx', 'source':              │ │
│ │               'data\\projects\\demo_project_batch_api\\input\\raw\\Leganto_Integration.docx', 'content_type': 'docx', 'doc_id':                                                   │ │
│ │               'data\\projects\\demo_project_batch_api\\input\\raw\\Leganto_Integration.docx'}, token_count=97, title=None, summary=None, embedding=None,                          │ │
│ │               id='53de45a3f2304880a8ca04d8102f3763'),                                                                                                                             │ │
│ │               │   │   Chunk(doc_id='data\\projects\\demo_project_batch_api\\input\\raw\\Scheduling_and_Monitoring_Jobs-Handout.docx', text="Alma Administration – General         │ │
│ │               Scheduling and Monitoring Jobs Hi, in this session, we'll learn how to: schedule certain jobs in Alma; monitor the status of scheduled and manual jobs; and add a   │ │
│ │               widget to your homepage that shows the scheduled jobs status. Some jobs in Alma are manual jobs, which means they are run by library staff on the fly. Other jobs   │ │
│ │               are scheduled, which means they run at certain time intervals. Many jobs can be run both manually and scheduled. Among the scheduled jobs, some are scheduled by Ex │ │
│ │               Libris and cannot be changed by the institution, while others can be scheduled by you, the Alma administrators. Primarily, the jobs you can schedule are related to │ │
│ │               Fulfillment and Acquisitions. To schedule Fulfillment related jobs, open Alma Configuration > Fulfillment > General: Fulfillment Jobs Configuration. Here you can   │ │
│ │               see and configure all the scheduled jobs related to Fulfillment; for example, the Borrowing Activity Report Job and the Send Overdue Notices Job. Each job can be   │ │
│ │               set as Active, which means it will run on schedule; or Inactive, which means it will not run on its own, but can still be run manually where available. To          │ │
│ │               configure the schedule of an Active job, open the Schedule dropdown-list and select a schedule. Different jobs offer different possible schedules. For example, the │ │
│ │               Borrowing Activity Report job can be run weekly (on the selected day), monthly (on the selected date), or not run on schedule at all. Note that depending on your   │ │
│ │               region and settings, you may see different scheduling options available here. Some jobs can be run manually by clicking Run Now.", meta={'source_filepath':         │ │
│ │               'data\\projects\\demo_project_batch_api\\input\\raw\\Scheduling_and_Monitoring_Jobs-Handout.docx', 'doc_type': 'docx', 'source':                                    │ │
│ │               'data\\projects\\demo_project_batch_api\\input\\raw\\Scheduling_and_Monitoring_Jobs-Handout.docx', 'content_type': 'docx', 'doc_id':                                │ │
│ │               'data\\projects\\demo_project_batch_api\\input\\raw\\Scheduling_and_Monitoring_Jobs-Handout.docx'}, token_count=269, title=None, summary=None, embedding=None,      │ │
│ │               id='c5d98d40120b4a4a994f0f34f6a1a3b3'),                                                                                                                             │ │
│ │               │   │   Chunk(doc_id='data\\projects\\demo_project_batch_api\\input\\raw\\Scheduling_and_Monitoring_Jobs-Handout.docx', text="and settings, you may see different   │ │
│ │               scheduling options available here. Some jobs can be run manually by clicking Run Now. There are other job-specific configurations you can make on this page. For    │ │
│ │               example, in the Anonymization job you can decide which fulfillment activities will have their identifying user information scrubbed when certain conditions are     │ │
│ │               met. When done configuring the jobs, click Save. Acquisitions related jobs can be configured under Alma Configuration > Acquisitions > General: Acquisition Jobs    │ │
│ │               Configuration. Here you can configure the PO Line package job and the SUSHI harvesting job. Resource Management jobs can be configured in a similar page. Now let's │ │
│ │               see how you can monitor the statuses of all jobs in Alma. Go back to Alma > Admin > Manage Jobs and Sets: Monitor Jobs. In the Scheduled tab, you can see all your  │ │
│ │               upcoming scheduled jobs, whether scheduled by library staff or Ex Libris. You can filter this page by Job Category, for example to see only Fulfillment jobs. For   │ │
│ │               each job, you can see whether it's active, what its schedule is, and when is the next scheduled run. Under row actions, you can select to view the Job History of   │ │
│ │               previous runs. And if you wish to receive email notifications when this job is run, you can add yourself and other users as subscribers. In the Monitor Jobs        │ │
│ │               Running tab, you can follow the progress of currently running jobs. This includes both scheduled jobs and manual jobs, such as the ones run from Admin > Run a      │ │
│ │               Job.", meta={'source_filepath': 'data\\projects\\demo_project_batch_api\\input\\raw\\Scheduling_and_Monitoring_Jobs-Handout.docx', 'doc_type': 'docx', 'source':    │ │
│ │               'data\\projects\\demo_project_batch_api\\input\\raw\\Scheduling_and_Monitoring_Jobs-Handout.docx', 'content_type': 'docx', 'doc_id':                                │ │
│ │               'data\\projects\\demo_project_batch_api\\input\\raw\\Scheduling_and_Monitoring_Jobs-Handout.docx'}, token_count=254, title=None, summary=None, embedding=None,      │ │
│ │               id='b7f05718a631410ca92d8b86b83baaa0'),                                                                                                                             │ │
│ │               │   │   Chunk(doc_id='data\\projects\\demo_project_batch_api\\input\\raw\\Scheduling_and_Monitoring_Jobs-Handout.docx', text="jobs. This includes both scheduled    │ │
│ │               jobs and manual jobs, such as the ones run from Admin > Run a Job. In the Monitor Jobs History tab, you can see all the completed jobs. You can filter this list by │ │
│ │               Job Category, Job Status, and the Submit Date Range, for example, to see all the jobs run last month. You can quickly see which jobs Completed Successfully and     │ │
│ │               which Completed with Errors. Under row actions, you can pull up the Job Report which details all the job information, or view Events to see any error messages      │ │
│ │               raised during runtime. One very convenient way to monitor jobs in Alma is to add the Scheduled Jobs Status widget to your homepage. From the Alma homepage, click   │ │
│ │               the plus icon on the top right of the Alma dashboard. Select the Scheduled Jobs Status widget, and close the Manage Widgets dialog. The widget has been added to    │ │
│ │               your dashboard. You can drag and drop it to the desired location. The Scheduled Jobs Status widget presents the status of scheduled jobs for the last five days.    │ │
│ │               You can select the date and Job Category to view, and immediately see the failure and success indicators. For more detailed information, click on the arrow for a   │ │
│ │               given job category, and you will be redirected to the Monitor Jobs History tab, filtered to view the selected jobs. In this case, all the unsuccessful jobs, to aid │ │
│ │               with troubleshooting. And that's how you schedule and monitor jobs in Alma. Thanks for joining!", meta={'source_filepath':                                          │ │
│ │               'data\\projects\\demo_project_batch_api\\input\\raw\\Scheduling_and_Monitoring_Jobs-Handout.docx', 'doc_type': 'docx', 'source':                                    │ │
│ │               'data\\projects\\demo_project_batch_api\\input\\raw\\Scheduling_and_Monitoring_Jobs-Handout.docx', 'content_type': 'docx', 'doc_id':                                │ │
│ │               'data\\projects\\demo_project_batch_api\\input\\raw\\Scheduling_and_Monitoring_Jobs-Handout.docx'}, token_count=252, title=None, summary=None, embedding=None,      │ │
│ │               id='26a9702ba852487692109f27fbb08e45')                                                                                                                              │ │
│ │               │   ]                                                                                                                                                               │ │
│ │               }                                                                                                                                                                   │ │
│ │        self = <scripts.embeddings.unified_embedder.UnifiedEmbedder object at 0x00000249FB08AF90>                                                                                  │ │
│ ╰───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯ │
│                                                                                                                                                                                       │
│ C:\git projects\Multi-Source_RAG_Platform\scripts\embeddings\unified_embedder.py:84 in _embed_and_store                                                                               │
│                                                                                                                                                                                       │
│    81 │   │   │   if meta_path.exists():                                                                                                                                              │
│    82 │   │   │   │   with open(meta_path, "r", encoding="utf-8") as f:                                                                                                               │
│    83 │   │   │   │   │   for line in f:                                                                                                                                              │
│ ❱  84 │   │   │   │   │   │   meta = json.loads(line)                                                                                                                                 │
│    85 │   │   │   │   │   │   existing_ids.add(meta["id"])                                                                                                                            │
│    86 │   │   else:                                                                                                                                                                   │
│    87 │   │   │   index = faiss.IndexFlatL2(self.dim)                                                                                                                                 │
│                                                                                                                                                                                       │
│ ╭───────────────────────────────────────────────────────────────────────────────────── locals ──────────────────────────────────────────────────────────────────────────────────────╮ │
│ │       chunks = [                                                                                                                                                                  │ │
│ │                │   Chunk(doc_id='data\\projects\\demo_project_batch_api\\input\\raw\\2024 Q1 New Content Roadmap.docx', text='Q1 2024 New Content Roadmap The content team is     │ │
│ │                happy to present the content roadmap for Q1, 2024. The roadmap is planned to highlight our content operations plans for each quarter, and communicate the upcoming │ │
│ │                expected new content plans. This list is dynamic and subject to possible changes, depending on the availability of the records and questions that may arise as we  │ │
│ │                work through the ingestion process. Currently, while we work to learn and adjust to the community needs for such a list, the table below is only a partial         │ │
│ │                representation of the new content that has been scoped for ingestion into the Ex Libris products. A "V" mark indicates that this content is planned to be ingested │ │
│ │                to these products in the coming quarter. The full lists of ingested content continue to be available weekly as part of the relevant Release Notes. If any          │ │
│ │                questions arise, please contact us via a Support Case and reference the list below. General highlights Authority vocabulary and enrichment highlights Non-English  │ │
│ │                and Regional highlights --- TABLE START --- Provider | Collections | Delivery – 360/SFX/Alma | Discovery – CDI | Notes Liverpool University Press | White Horse    │ │
│ │                Press | V Eastview | CRL collections enrichment with MARC | V Edward Elgar | Encyclopedia of Tourism and Management | V Lived Places Publishing | Books collection │ │
│ │                | V Gale Primary Sources | Decolonization Politics; Making of Modern Law; Women\'s Studies Archive; State Papers Online Colonial; Times Educational Supplement | V │ │
│ │                Taylor & Francis | Routledge Handbooks | V ASME | ASME all transactions journals | V Sage | Knowledge Video collections | V ACS | ACS In Focus Collection 3 | V    │ │
│ │                ASPET | Journal collections | V SAE | SAE Magazines | V ESA | BioOne | V', meta={'source_filepath': 'data\\projects\\demo_project_batch_api\\input\\raw\\2024 Q1   │ │
│ │                New Content Roadmap.docx', 'doc_type': 'docx', 'source': 'data\\projects\\demo_project_batch_api\\input\\raw\\2024 Q1 New Content Roadmap.docx', 'content_type':   │ │
│ │                'docx', 'doc_id': 'data\\projects\\demo_project_batch_api\\input\\raw\\2024 Q1 New Content Roadmap.docx'}, token_count=294, title=None, summary=None,              │ │
│ │                embedding=None, id='1ce8cf43638d468cb4fef4b9f4286011'),                                                                                                            │ │
│ │                │   Chunk(doc_id='data\\projects\\demo_project_batch_api\\input\\raw\\2024 Q1 New Content Roadmap.docx', text='3 | V ASPET | Journal collections | V SAE | SAE     │ │
│ │                Magazines | V ESA | BioOne | V JSTOR | 7 collections | V | V | Idea Exchange The House Magazine | The House Magazine | V Begell House | 7 collections | V          │ │
│ │                IBISWorld | Australian Industry Reports | V Beamafilm | Australian Videos | V Newsbank | Single title archives | V | Idea Exchange Adam Matthew | Royal            │ │
│ │                Shakespeare Company Archives | V | Idea Exchange EastView | Enriching Slavic and Judaica book collections | V --- TABLE END --- --- TABLE START --- Provider |     │ │
│ │                Collections | Delivery – 360/SFX/Alma | Discovery – CDI | Notes Homos aurus | international LGBTQ+ Authority Vocabulary | V | Carried over from Q4 2023 Idea       │ │
│ │                Exchange National Authorities of NLK | National Library of Korea Authority Vocabulary | V AIATSIS | Aboriginal and Torres Strait Islander Authority Vocabulary | V │ │
│ │                | Idea Exchange TEKA | Finnish Work and Expression Authorities | V | Idea Exchange --- TABLE END --- --- TABLE START --- Provider | Collections | Delivery –       │ │
│ │                360/SFX/Alma | Discovery – CDI | Notes Chinese Academy of Social Sciences | National Social Sciences Database (NSSD) | V Boomportaal | Boomportaal e-journals | V  │ │
│ │                Preselect | Journals | V GOKb | BIBSAM collections | V --- TABLE END ---', meta={'source_filepath': 'data\\projects\\demo_project_batch_api\\input\\raw\\2024 Q1   │ │
│ │                New Content Roadmap.docx', 'doc_type': 'docx', 'source': 'data\\projects\\demo_project_batch_api\\input\\raw\\2024 Q1 New Content Roadmap.docx', 'content_type':   │ │
│ │                'docx', 'doc_id': 'data\\projects\\demo_project_batch_api\\input\\raw\\2024 Q1 New Content Roadmap.docx'}, token_count=224, title=None, summary=None,              │ │
│ │                embedding=None, id='41ba614b00ce4d31983add69ec4f4b1e'),                                                                                                            │ │
│ │                │   Chunk(doc_id='data\\projects\\demo_project_batch_api\\input\\raw\\Leganto_Integration.docx', text='Leganto Integration --- TABLE START --- Script | Direction  │ │
│ │                You can integrate campusM with Leganto, Ex Libris’s resource list management system, allowing students to access their course resource lists, and instructors to   │ │
│ │                create and manage their lists, all from their mobile device. In this session, we’ll take a quick tour of the Leganto integration, then we’ll show how to configure │ │
│ │                the authentication, product integration instance, and live tile for the integration. | General screenshots of the Leganto PI homepage We are currently logged in   │ │
│ │                as an instructor in our campusM app on web, which automatically logs us into library services, such as Leganto, as well. The Leganto tile shows us live personal   │ │
│ │                information at a glance, such as to how many lists we are subscribed, how many notifications we have, how many due dates for reading or viewing the list items,    │ │
│ │                and the next due date, if applicable. Clicking on the tile takes us to Leganto. In the Lists page, you can see all your reading lists, add a new list, and open a  │ │
│ │                list to view it. When viewing a resource list, you can add items, add list sections, and perform all the editing actions on items. From the user menu, you can     │ │
│ │                access language and user settings, go to RefWorks, and use the Cite It! Widget. From the navigation menu, you can go back to lists, view your collection of items, │ │
│ │                and find a reading list by searching your institution. This concludes our quick tour of the Leganto integration. Next, let’s see how to configure it. | campusM    │ │
│ │                App All configurations for the Leganto integration are done within the App Manager.', meta={'source_filepath':                                                     │ │
│ │                'data\\projects\\demo_project_batch_api\\input\\raw\\Leganto_Integration.docx', 'doc_type': 'docx', 'source':                                                      │ │
│ │                'data\\projects\\demo_project_batch_api\\input\\raw\\Leganto_Integration.docx', 'content_type': 'docx', 'doc_id':                                                  │ │
│ │                'data\\projects\\demo_project_batch_api\\input\\raw\\Leganto_Integration.docx'}, token_count=273, title=None, summary=None, embedding=None,                        │ │
│ │                id='bcca81a2a9db4b329a4d94c1f5e4ec97'),                                                                                                                            │ │
│ │                │   Chunk(doc_id='data\\projects\\demo_project_batch_api\\input\\raw\\Leganto_Integration.docx', text='see how to configure it. | campusM App All configurations   │ │
│ │                for the Leganto integration are done within the App Manager. The first step is to configure the user’s authentication in the library. As we mentioned, users are   │ │
│ │                automatically logged in to Leganto via Alma in a single-sign-on, or SSO. For this, we need to verify that the user’s AlmaID attribute is being returned by the     │ │
│ │                identity provider, or IDP. To configure the assignment of the AlmaID from the IDP, go to App Settings > Integration Profiles, and edit the relevant integration    │ │
│ │                profile. In the integration profile editor, under Additional Mappings, make sure you populate the AlmaId with the relevant parameter in the IDP token. Note that   │ │
│ │                if the app sends an invalid AlmaID to Alma, the user will not be logged in and will need to log in manually. Save your changes. | App Manager > App Settings >     │ │
│ │                Integration profile > Additional Mappings Next, let’s set up the Leganto integration. In App Manager, go to Product Integrations, and click Add Product            │ │
│ │                Integration Instance. For the Product Integration Type, select Leganto. | App Manager > App Builder In this page, you can configure your Leganto integration.      │ │
│ │                Select Enable Product Integration; and provide a Description, which is the name of the integration. | Description: Course Readings In the General section, you     │ │
│ │                must fill in this information: Under Base URL, fill in the base URL of your Alma instance, which is linked to Leganto. Enter your Alma Institution Code. The       │ │
│ │                Authorization Token is a secured handshake between campusM and Alma, that needs to be configured both here and in Alma. Make sure the token you enter here matches │ │
│ │                the one in Alma under Discovery > Customer Settings > app_authorization_token.', meta={'source_filepath':                                                          │ │
│ │                'data\\projects\\demo_project_batch_api\\input\\raw\\Leganto_Integration.docx', 'doc_type': 'docx', 'source':                                                      │ │
│ │                'data\\projects\\demo_project_batch_api\\input\\raw\\Leganto_Integration.docx', 'content_type': 'docx', 'doc_id':                                                  │ │
│ │                'data\\projects\\demo_project_batch_api\\input\\raw\\Leganto_Integration.docx'}, token_count=287, title=None, summary=None, embedding=None,                        │ │
│ │                id='28d1db7e36be46d7ad8cc58a083373ac'),                                                                                                                            │ │
│ │                │   Chunk(doc_id='data\\projects\\demo_project_batch_api\\input\\raw\\Leganto_Integration.docx', text='Alma. Make sure the token you enter here matches the one in │ │
│ │                Alma under Discovery > Customer Settings > app_authorization_token. You may select a Landing Page, which is where the user is redirected when they click on the    │ │
│ │                live tile. By default, it’s your Leganto Lists page, but it can also be the Leganto Search page. In the Live Tile section, if Enabled, the live tile will be       │ │
│ │                available in the Leganto home screen, displaying personalized info; otherwise, the tile will be static. Under Live Tile Items, you can select which widgets you    │ │
│ │                would like to see in the live tile. Show Lists – displays the number of lists to which the user is subscribed. Show Notifications – displays the number of unread  │ │
│ │                notifications. Show Due Dates – displays how many items are due to be read or viewed. And Show Next Due Date – displays the next due date for an item, if          │ │
│ │                applicable. In the Prioritize Live Tile Items section, you can change the display order of the live tile items via the arrows. For the icons of the live tile      │ │
│ │                items, we will use campusM’s default icons. Alternatively, you can select to upload custom icons of your own. In the Text/Labels section, you may customize the    │ │
│ │                text labels for the various widgets. When done configuring your Leganto integration, click Save. The new Leganto integration has been created. The final step in   │ │
│ │                the deployment is to add a menu option, or tile, to the home screen, which is connected to the Leganto integration we just created. In App Manager, go to App      │ │
│ │                Builder, and add a menu option. From the available menu option types, select Product Integrations Tile. For the product integration instance, select your newly    │ │
│ │                created Leganto integration. Give the menu option a name, and click Create.', meta={'source_filepath':                                                             │ │
│ │                'data\\projects\\demo_project_batch_api\\input\\raw\\Leganto_Integration.docx', 'doc_type': 'docx', 'source':                                                      │ │
│ │                'data\\projects\\demo_project_batch_api\\input\\raw\\Leganto_Integration.docx', 'content_type': 'docx', 'doc_id':                                                  │ │
│ │                'data\\projects\\demo_project_batch_api\\input\\raw\\Leganto_Integration.docx'}, token_count=300, title=None, summary=None, embedding=None,                        │ │
│ │                id='531e15b6dc194c29908095d414c22542'),                                                                                                                            │ │
│ │                │   Chunk(doc_id='data\\projects\\demo_project_batch_api\\input\\raw\\Leganto_Integration.docx', text='For the product integration instance, select your newly     │ │
│ │                created Leganto integration. Give the menu option a name, and click Create. Our menu option has been added. You can now configure this tile, as you would with any │ │
│ │                other tile; for example, to change its size. Our tile’s appearance has been changed. Our live tile appears blank in the preview, but the user will see it          │ │
│ │                populated with their personalized data! When done configuring your tile, click Save & Publish. The tile is now published to the end-users of the app. Thanks for   │ │
│ │                joining! --- TABLE END ---', meta={'source_filepath': 'data\\projects\\demo_project_batch_api\\input\\raw\\Leganto_Integration.docx', 'doc_type': 'docx',          │ │
│ │                'source': 'data\\projects\\demo_project_batch_api\\input\\raw\\Leganto_Integration.docx', 'content_type': 'docx', 'doc_id':                                        │ │
│ │                'data\\projects\\demo_project_batch_api\\input\\raw\\Leganto_Integration.docx'}, token_count=97, title=None, summary=None, embedding=None,                         │ │
│ │                id='53de45a3f2304880a8ca04d8102f3763'),                                                                                                                            │ │
│ │                │   Chunk(doc_id='data\\projects\\demo_project_batch_api\\input\\raw\\Scheduling_and_Monitoring_Jobs-Handout.docx', text="Alma Administration – General Scheduling │ │
│ │                and Monitoring Jobs Hi, in this session, we'll learn how to: schedule certain jobs in Alma; monitor the status of scheduled and manual jobs; and add a widget to   │ │
│ │                your homepage that shows the scheduled jobs status. Some jobs in Alma are manual jobs, which means they are run by library staff on the fly. Other jobs are        │ │
│ │                scheduled, which means they run at certain time intervals. Many jobs can be run both manually and scheduled. Among the scheduled jobs, some are scheduled by Ex    │ │
│ │                Libris and cannot be changed by the institution, while others can be scheduled by you, the Alma administrators. Primarily, the jobs you can schedule are related   │ │
│ │                to Fulfillment and Acquisitions. To schedule Fulfillment related jobs, open Alma Configuration > Fulfillment > General: Fulfillment Jobs Configuration. Here you   │ │
│ │                can see and configure all the scheduled jobs related to Fulfillment; for example, the Borrowing Activity Report Job and the Send Overdue Notices Job. Each job can │ │
│ │                be set as Active, which means it will run on schedule; or Inactive, which means it will not run on its own, but can still be run manually where available. To      │ │
│ │                configure the schedule of an Active job, open the Schedule dropdown-list and select a schedule. Different jobs offer different possible schedules. For example,    │ │
│ │                the Borrowing Activity Report job can be run weekly (on the selected day), monthly (on the selected date), or not run on schedule at all. Note that depending on   │ │
│ │                your region and settings, you may see different scheduling options available here. Some jobs can be run manually by clicking Run Now.", meta={'source_filepath':   │ │
│ │                'data\\projects\\demo_project_batch_api\\input\\raw\\Scheduling_and_Monitoring_Jobs-Handout.docx', 'doc_type': 'docx', 'source':                                   │ │
│ │                'data\\projects\\demo_project_batch_api\\input\\raw\\Scheduling_and_Monitoring_Jobs-Handout.docx', 'content_type': 'docx', 'doc_id':                               │ │
│ │                'data\\projects\\demo_project_batch_api\\input\\raw\\Scheduling_and_Monitoring_Jobs-Handout.docx'}, token_count=269, title=None, summary=None, embedding=None,     │ │
│ │                id='c5d98d40120b4a4a994f0f34f6a1a3b3'),                                                                                                                            │ │
│ │                │   Chunk(doc_id='data\\projects\\demo_project_batch_api\\input\\raw\\Scheduling_and_Monitoring_Jobs-Handout.docx', text="and settings, you may see different      │ │
│ │                scheduling options available here. Some jobs can be run manually by clicking Run Now. There are other job-specific configurations you can make on this page. For   │ │
│ │                example, in the Anonymization job you can decide which fulfillment activities will have their identifying user information scrubbed when certain conditions are    │ │
│ │                met. When done configuring the jobs, click Save. Acquisitions related jobs can be configured under Alma Configuration > Acquisitions > General: Acquisition Jobs   │ │
│ │                Configuration. Here you can configure the PO Line package job and the SUSHI harvesting job. Resource Management jobs can be configured in a similar page. Now      │ │
│ │                let's see how you can monitor the statuses of all jobs in Alma. Go back to Alma > Admin > Manage Jobs and Sets: Monitor Jobs. In the Scheduled tab, you can see    │ │
│ │                all your upcoming scheduled jobs, whether scheduled by library staff or Ex Libris. You can filter this page by Job Category, for example to see only Fulfillment   │ │
│ │                jobs. For each job, you can see whether it's active, what its schedule is, and when is the next scheduled run. Under row actions, you can select to view the Job   │ │
│ │                History of previous runs. And if you wish to receive email notifications when this job is run, you can add yourself and other users as subscribers. In the Monitor │ │
│ │                Jobs Running tab, you can follow the progress of currently running jobs. This includes both scheduled jobs and manual jobs, such as the ones run from Admin > Run  │ │
│ │                a Job.", meta={'source_filepath': 'data\\projects\\demo_project_batch_api\\input\\raw\\Scheduling_and_Monitoring_Jobs-Handout.docx', 'doc_type': 'docx', 'source': │ │
│ │                'data\\projects\\demo_project_batch_api\\input\\raw\\Scheduling_and_Monitoring_Jobs-Handout.docx', 'content_type': 'docx', 'doc_id':                               │ │
│ │                'data\\projects\\demo_project_batch_api\\input\\raw\\Scheduling_and_Monitoring_Jobs-Handout.docx'}, token_count=254, title=None, summary=None, embedding=None,     │ │
│ │                id='b7f05718a631410ca92d8b86b83baaa0'),                                                                                                                            │ │
│ │                │   Chunk(doc_id='data\\projects\\demo_project_batch_api\\input\\raw\\Scheduling_and_Monitoring_Jobs-Handout.docx', text="jobs. This includes both scheduled jobs  │ │
│ │                and manual jobs, such as the ones run from Admin > Run a Job. In the Monitor Jobs History tab, you can see all the completed jobs. You can filter this list by Job │ │
│ │                Category, Job Status, and the Submit Date Range, for example, to see all the jobs run last month. You can quickly see which jobs Completed Successfully and which  │ │
│ │                Completed with Errors. Under row actions, you can pull up the Job Report which details all the job information, or view Events to see any error messages raised    │ │
│ │                during runtime. One very convenient way to monitor jobs in Alma is to add the Scheduled Jobs Status widget to your homepage. From the Alma homepage, click the     │ │
│ │                plus icon on the top right of the Alma dashboard. Select the Scheduled Jobs Status widget, and close the Manage Widgets dialog. The widget has been added to your  │ │
│ │                dashboard. You can drag and drop it to the desired location. The Scheduled Jobs Status widget presents the status of scheduled jobs for the last five days. You    │ │
│ │                can select the date and Job Category to view, and immediately see the failure and success indicators. For more detailed information, click on the arrow for a      │ │
│ │                given job category, and you will be redirected to the Monitor Jobs History tab, filtered to view the selected jobs. In this case, all the unsuccessful jobs, to    │ │
│ │                aid with troubleshooting. And that's how you schedule and monitor jobs in Alma. Thanks for joining!", meta={'source_filepath':                                     │ │
│ │                'data\\projects\\demo_project_batch_api\\input\\raw\\Scheduling_and_Monitoring_Jobs-Handout.docx', 'doc_type': 'docx', 'source':                                   │ │
│ │                'data\\projects\\demo_project_batch_api\\input\\raw\\Scheduling_and_Monitoring_Jobs-Handout.docx', 'content_type': 'docx', 'doc_id':                               │ │
│ │                'data\\projects\\demo_project_batch_api\\input\\raw\\Scheduling_and_Monitoring_Jobs-Handout.docx'}, token_count=252, title=None, summary=None, embedding=None,     │ │
│ │                id='26a9702ba852487692109f27fbb08e45')                                                                                                                             │ │
│ │                ]                                                                                                                                                                  │ │
│ │     doc_type = 'docx'                                                                                                                                                             │ │
│ │ existing_ids = set()                                                                                                                                                              │ │
│ │            f = <_io.TextIOWrapper name='C:\\git projects\\Multi-Source_RAG_Platform\\data\\projects\\demo_project_batch_api\\output\\metadata\\docx_metadata.jsonl' mode='r'      │ │
│ │                encoding='utf-8'>                                                                                                                                                  │ │
│ │   faiss_path = WindowsPath('C:/git projects/Multi-Source_RAG_Platform/data/projects/demo_project_batch_api/output/faiss/docx.faiss')                                              │ │
│ │        index = <faiss.swigfaiss_avx2.IndexFlatL2; proxy of <Swig Object of type 'faiss::IndexFlatL2 *' at 0x0000024A2FFEED30> >                                                   │ │
│ │         line = '{"source_filepath": "data\\\\projects\\\\demo_project_batch_api\\\\input\\\\raw\\\\2024 Q1'+3730                                                                  │ │
│ │    meta_path = WindowsPath('C:/git projects/Multi-Source_RAG_Platform/data/projects/demo_project_batch_api/output/metadata/docx_metadata.jsonl')                                  │ │
│ │         self = <scripts.embeddings.unified_embedder.UnifiedEmbedder object at 0x00000249FB08AF90>                                                                                 │ │
│ ╰───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯ │
│                                                                                                                                                                                       │
│ C:\Python\Python3135\Lib\json\__init__.py:346 in loads                                                                                                                                │
│                                                                                                                                                                                       │
│   343 │   if (cls is None and object_hook is None and                                                                                                                                 │
│   344 │   │   │   parse_int is None and parse_float is None and                                                                                                                       │
│   345 │   │   │   parse_constant is None and object_pairs_hook is None and not kw):                                                                                                   │
│ ❱ 346 │   │   return _default_decoder.decode(s)                                                                                                                                       │
│   347 │   if cls is None:                                                                                                                                                             │
│   348 │   │   cls = JSONDecoder                                                                                                                                                       │
│   349 │   if object_hook is not None:                                                                                                                                                 │
│                                                                                                                                                                                       │
│ ╭─────────────────────────────────────────────────────── locals ────────────────────────────────────────────────────────╮                                                             │
│ │               cls = None                                                                                              │                                                             │
│ │                kw = {}                                                                                                │                                                             │
│ │       object_hook = None                                                                                              │                                                             │
│ │ object_pairs_hook = None                                                                                              │                                                             │
│ │    parse_constant = None                                                                                              │                                                             │
│ │       parse_float = None                                                                                              │                                                             │
│ │         parse_int = None                                                                                              │                                                             │
│ │                 s = '{"source_filepath": "data\\\\projects\\\\demo_project_batch_api\\\\input\\\\raw\\\\2024 Q1'+3730 │                                                             │
│ ╰───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯                                                             │
│                                                                                                                                                                                       │
│ C:\Python\Python3135\Lib\json\decoder.py:348 in decode                                                                                                                                │
│                                                                                                                                                                                       │
│   345 │   │   obj, end = self.raw_decode(s, idx=_w(s, 0).end())                                                                                                                       │
│   346 │   │   end = _w(s, end).end()                                                                                                                                                  │
│   347 │   │   if end != len(s):                                                                                                                                                       │
│ ❱ 348 │   │   │   raise JSONDecodeError("Extra data", s, end)                                                                                                                         │
│   349 │   │   return obj                                                                                                                                                              │
│   350 │                                                                                                                                                                               │
│   351 │   def raw_decode(self, s, idx=0):                                                                                                                                             │
│                                                                                                                                                                                       │
│ ╭─────────────────────────────────────────────────────── locals ────────────────────────────────────────────────────────╮                                                             │
│ │   _w = <built-in method match of re.Pattern object at 0x0000024926C229B0>                                             │                                                             │
│ │  end = 421                                                                                                            │                                                             │
│ │  obj = {                                                                                                              │                                                             │
│ │        │   'source_filepath': 'data\\projects\\demo_project_batch_api\\input\\raw\\2024 Q1 New Content Roadmap.docx', │                                                             │
│ │        │   'doc_type': 'docx',                                                                                        │                                                             │
│ │        │   'source': 'data\\projects\\demo_project_batch_api\\input\\raw\\2024 Q1 New Content Roadmap.docx',          │                                                             │
│ │        │   'content_type': 'docx',                                                                                    │                                                             │
│ │        │   'doc_id': 'data\\projects\\demo_project_batch_api\\input\\raw\\2024 Q1 New Content Roadmap.docx',          │                                                             │
│ │        │   'id': '357acdf30c284b4f5efbd21f413c6d156b2b32852bb2ec36b5da83d2010f8eaf'                                   │                                                             │
│ │        }                                                                                                              │                                                             │
│ │    s = '{"source_filepath": "data\\\\projects\\\\demo_project_batch_api\\\\input\\\\raw\\\\2024 Q1'+3730              │                                                             │
│ │ self = <json.decoder.JSONDecoder object at 0x0000024926C88830>                                                        │                                                             │
│ ╰───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯                                                             │
╰───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
JSONDecodeError: Extra data: line 1 column 422 (char 421)