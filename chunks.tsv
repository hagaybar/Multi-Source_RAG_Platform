chunk_id	doc_id	text	token_count	meta_json
7615ed3c876645c6a26e28df12c3d279	instructions.txt	# RAG Pipeline – Next-Gen Prototype ## 1 Mission Statement Build an open-source, **modular Retrieval-Augmented-Generation platform** that lets a single knowledge-worker (e.g., a Library IT professional) turn heterogeneous internal content (PDFs, office docs, presentations, emails, web pages, screenshots, etc.) into an interactive knowledge base that answers practical “how-to” questions in ≤ 5 seconds, while keeping data local and costs controllable. ## 2 Guiding Principles * **Modularity first** – every capability (ingestor, chunker, embedder…) is a plug-in behind a thin interface. * **Source-aware processing** – choose the right chunking/OCR logic per file type. * **Local-first** – all raw files, indexes, and logs live on disk; cloud APIs used only for LLM/embedding when chosen by the user. * **User-friendly** – Streamlit UI walks the user through *Project → Dataset → Steps → Query* with sensible defaults. * **Extensible & agentic** – later we can drop-in new sources, models, or multi-agent workflows without refactor. ## 3 Functional Scope (v0.1 Prototype)	157	"{""source_filepath"": ""instructions.txt"", ""doc_type"": ""txt"", ""doc_id"": ""instructions.txt""}"
6af27206800b4a3787ebc8250a68e090	instructions.txt	drop-in new sources, models, or multi-agent workflows without refactor. ## 3 Functional Scope (v0.1 Prototype) | # | Capability | Notes | | - | ------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- | | 1 | **Project management** | Create / load projects, YAML config per project, local paths resolved via GUI. | | 2 | **Data ingestion** | Upload or drag-drop files up to **1 GB** total; initial types: TXT, PDF, PPTX, DOCX, XLSX/CSV, images (PNG/JPG), EML/MBOX, public URLs. | | 3 | **Chunking engine** | Pluggable rule-sets per type; built-ins: “PlainText-Sentences”, “PDF-Pages”, “PPT-Slide”, “Doc-Heading”, “Tabular-Row”. | | 4 | **Embedding & index** | User selects *Local model* (e.g., `bge-large-en`) **or** *API model* (OpenAI); FAISS index per source-type, unified view via late fusion. | | 5 | **Retrieval & filtering** | KNN search + date filter; multilingual fallback = translate→English (via API). | | 6 | **Prompting layer** | Template library: QA-with-citations (default), Summarise-dataset, Compare-sources; users can add more. | | 7 | **Answer generation** | OpenAI Chat (default) with pluggable LLM endpoint; returns answer + cite ids. | | 8 | **UI** | Streamlit tabs: *Datasets*, *Chunk/Index*, *Query*, *Settings*, *Logs*. | | 9 | **Logging & monitoring** | Structured logs per project/task; simple dashboard in UI. | ## 4 High-Level Architecture ``` ┌────────────┐ upload ┌──────────────┐ chunks ┌────────────┐ │ Streamlit │────────►│ IngestionSvc │────────►│ ChunkEngine│ └─────┬──────┘ └──────────────┘ └────┬──────┘ │ config embeds │ ▼ ┌──▼──┐ queries ┌─────────┐ ┌────────────┐ meta ┌────────────┐ vectors ▼ │Vector│◄───────────│Retriever│ │ConfigMgr │────────►│ EmbedSvc │────────────►│Store │───────────►│ & Fusion│ └────────────┘ └────────────┘ └──┬──┘ answer ctx └────┬────┘ │ │ ▼ │ ┌────────────┐ prompt + ctx │ │LLM Gateway │───────────────┘ └────┬───────┘ answer ▼ ┌────────────┐ │Agent Hub │ (optional) └────────────┘ ``` *All arrows are API-level interfaces; each box is an importable Python package.* ## 5 Component Specs (initial contracts) ### 5.1 Ingestion Service ```python ingest(file_path: Path, project_cfg: dict) -> RawDocument ```	303	"{""source_filepath"": ""instructions.txt"", ""doc_type"": ""txt"", ""doc_id"": ""instructions.txt""}"
6b6dfff6d44748e484d1c8c4c87f122d	instructions.txt	Specs (initial contracts) ### 5.1 Ingestion Service ```python ingest(file_path: Path, project_cfg: dict) -> RawDocument ``` * Detect type, extract text/metadata, save raw copy under `/data/{project}/raw/{source_type}/`. * For web: download HTML + readability extraction. * For images: run Tesseract OCR; store extracted text + base64 preview. ### 5.2 Chunk Engine ```python chunk(doc: RawDocument, rule_set: str) -> list[Chunk] ``` * Rule-sets are Python classes in `chunk_rules/`; user’s YAML picks which set per source. ### 5.3 Embedding Service * Interface `embed(texts: list[str]) -> np.ndarray`. * Implementations: `LocalHuggingFace`, `OpenAIEmbedding`. ### 5.4 Vector Store Adapter * Default `FaissAdapter`. Interface hides index-type so swapping to pgvector is one file. ### 5.5 Retrieval & Fusion * `retrieve(query, k, filters) -> list[Chunk]` (source-specific KNN → score re-rank → merge). ### 5.6 LLM Gateway * Wrapper around chat/completions with retry, cost-tracking, streaming to UI. ### 5.7 Agent Hub (stretch-goal) * **Source Selector Agent** chooses which indexes to hit. * **Validator Agent** verifies answer faithfulness via second pass. ### 5.8 Config Manager * YAML schema validation; CLI + UI wizard. ### 5.9 Logging * `logger = get_logger(project, component)` → writes to `/logs/{project}/YYYY-MM-DD.log`. ## 6 Technology Stack * **Python 3.12**, **Streamlit 1.35** for UI. * Parsing libs: `pdfplumber`, `python-pptx`, `python-docx`, `pandas`, `readability-lxml`, `tesserocr`. * Embeddings: HuggingFace `sentence-transformers`, OpenAI, future Google Vertex, Anthropic, etc. * Agentic: start simple (no external framework); later integrate `LangChain Agents` or `Crew-AI`. * Packaging & linting: `poetry`, `ruff`, `mypy`. ## 7 Milestone Roadmap (8 Weeks)	238	"{""source_filepath"": ""instructions.txt"", ""doc_type"": ""txt"", ""doc_id"": ""instructions.txt""}"
72cc8a777ada44a495ed8d467ea2fdec	instructions.txt	or `Crew-AI`. * Packaging & linting: `poetry`, `ruff`, `mypy`. ## 7 Milestone Roadmap (8 Weeks) | Week | Deliverables | | ---- | ---------------------------------------------------------------------------------------------- | | 1 | Git repo skeleton, Config Manager, Streamlit project wizard, TXT/PDF ingestor + plain chunker. | | 2 | FAISS adapter, Local embedding (bge-large-en) integration, simple retrieval demo. | | 3 | Add DOCX, PPTX, XLSX ingestors; rule-set plugin framework; UI upload panel. | | 4 | Image OCR ingestion; metadata & date filters; unified late-fusion retrieval. | | 5 | OpenAI embedding + LLM gateway; QA prompt template; answer display with citations. | | 6 | Email (.eml/.mbox) ingestion; web URL crawler; multilingual fallback via translation API. | | 7 | Agent Hub POC (source selector + validator); logging dashboard; basic unit-test suite. | | 8 | Performance tuning (<5 s), docs (dev & user), 0.1 release tag. | ## 8 Risks & Mitigations * **OCR quality** → allow manual correction sidebar. * **Index growth beyond RAM** → chunk-size tuning + option to swap FAISS for disk-backed store. * **Model cost spikes** → cost estimator in UI before embedding large batches. ## 9 Future Extensions * Word/Excel formulas parsing, audio transcript ingestion, SharePoint crawler, multi-user auth. * Replace Streamlit with Next.js front-end; Docker deployment; scheduled dataset refresh. --- *Last updated 2025-06-10.* ## 10 Repository / Codebase Structure A clear, conventional layout makes it easy for contributors—human **and** AI—to navigate and extend the project. Below is the proposed top-level tree followed by key conventions.	250	"{""source_filepath"": ""instructions.txt"", ""doc_type"": ""txt"", ""doc_id"": ""instructions.txt""}"
4ff9f8d0376b403ea941a16de634926e	instructions.txt	navigate and extend the project. Below is the proposed top-level tree followed by key conventions. ```text rag-pipeline/ ├── app/ # User-facing entrypoints (CLI & Streamlit) │ ├── cli.py # Rich-CLI powered by Typer │ └── ui_streamlit.py # Streamlit dashboard ├── scripts/ # Core library package (installable) │ ├── __init__.py │ ├── ingestion/ # Loader classes per source-type │ │ ├── base.py # AbstractIngestor │ │ ├── pdf.py # PDFPlumberIngestor │ │ ├── pptx.py # PptxIngestor │ │ ├── docx.py # DocxIngestor │ │ ├── image.py # OCRIngestor (tesserocr) │ │ └── web.py # UrlIngestor (readability-lxml) │ ├── chunking/ │ │ ├── base.py # AbstractChunker │ │ ├── rules/ │ │ │ ├── plaintext.py │ │ │ ├── pdf_pages.py │ │ │ ├── ppt_slide.py │ │ │ └── doc_heading.py │ ├── embeddings/ │ │ ├── base.py # AbstractEmbedder │ │ ├── local_bge.py │ │ └── openai.py │ ├── index/ │ │ ├── base.py # VectorStore interface │ │ └── faiss_adapter.py │ ├── retrieval/ │ │ ├── hybrid.py # Late-fusion retriever │ │ ├── filters.py # Date & metadata filters │ │ └── rankers.py # Optional rerank step │ ├── prompting/ │ │ ├── templates/ │ │ │ ├── qa_default.jinja │ │ │ ├── summarise.jinja │ │ │ └── compare.jinja │ │ └── gateway.py # LLMGateway (OpenAI, Anthropic, Google) │ ├── agents/ # Stretch-goal multi-agent workflows │ └── utils/ # Logger, cost tracker, registry helpers ├── configs/ │ ├── settings.yaml # Global defaults (paths, OCR language) │ ├── datasets/ # <dataset>.yaml (upload & chunk config) │ └── tasks/ # <task>.yaml (models, retriever, prompt) ├── data/ # Local storage (git-ignored) │ ├── raw/ │ ├── processed/ │ ├── chunks/ │ └── indexes/ ├── tests/ # Pytest suite mirroring scripts/ │ └── integration/ ├── docs/ # Markdown design docs & diagrams ├── assets/ # Sample files for demos & tests ├── requirements.txt # Quick setup pin-list ├── pyproject.toml # Build & dependency management (Poetry) └── README.md # Quick-start instructions │ ├── outputs/	328	"{""source_filepath"": ""instructions.txt"", ""doc_type"": ""txt"", ""doc_id"": ""instructions.txt""}"
52ad83d436bb4c25a506c51e91a7395c	instructions.txt	pyproject.toml # Build & dependency management (Poetry) └── README.md # Quick-start instructions │ ├── outputs/ ``` ### 10.1 Design Conventions * **`scripts/` is a namespace package** – install with `pip install -e .`; keep all business logic here. * **Pluggability** – each sub-package exposes a `registry.py`; new classes register via `@registry.register` decorator and become auto-discoverable. * **Config-driven** – mapping from dataset/task YAML → factories resolve appropriate ingestor, chunker, embedder, etc. * **Data isolation** – every project creates its own sub-folders under `data/` and `logs/` to avoid clashes. * **Testing parity** – tests mirror package tree; integration tests spin up a tiny fixture dataset (≤ 1 MB) to run end-to-end. * **Doc cross-refs** – design docs reference code with relative links so GitHub renders them nicely. --- *Last updated 2025-06-10.*	129	"{""source_filepath"": ""instructions.txt"", ""doc_type"": ""txt"", ""doc_id"": ""instructions.txt""}"
a3939d0aa842473999c0dfa08f0867c6	sample_test_doc.txt	This is the first paragraph, significantly expanded to ensure it meets the minimum token count. We are adding a lot of dummy text here to make sure that this specific paragraph itself is long enough to be considered a chunk. More words, more words, and even more words. Let's count: one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty twenty-one twenty-two twenty-three twenty-four twenty-five. This should be more than enough. This is the second paragraph. It also has text. This line is part of the second paragraph. This is a third, short paragraph.	104	"{""source_filepath"": ""sample_test_doc.txt"", ""doc_type"": ""txt"", ""doc_id"": ""sample_test_doc.txt""}"
642df6710ece43579c9033b4ce1cb68f	roadmap.txt	# RAG Pipeline Project – Workflow Roadmap --- ## 0 Kick‑off & Plumbing (½ week) * Draft scope, success metrics, data sources. * Hard repo rules: `.gitignore`, Poetry, Ruff + Black, Mypy, pre‑commit, GitHub Actions CI. * Agree branching policy & PR checklist. ## 1 Ingestion Layer * Port email loaders. * Add loaders: **DOCX, PPTX, images (OCR)**. * Draft chunking rule‑sets per type. ## 2 Embed + Store * `ChunkEmbedder` batching & cumulative FAISS updates. * Duplicate‑check logic. ## 3 Retrieval API * `ChunkRetriever` with date filters & late‑fusion by type. * Top‑*k* tuning script. ## 4 Prompt & Evaluation Harness * QA‑with‑citations template library. * Synthetic test suite; nightly evaluation job. ## 5 UI & Orchestration * Streamlit MVP: Query tab, config manager, run‑log viewer. ## 6 Agent Integration & Logging * Wire **Google Jules** into CI (feature branches only). * Structured logging module; coloured console / JSON file output. ## 7 Performance & Safeguards * Stress‑test on 1 GB corpus. * Cost model; failure‑handling & feature flags. ## 8 Hardening & Demo Prep * Freeze feature work, bug‑bash. * Polish docs, create demo dataset & walkthrough. --- ## Daily Rhythm (Mon–Fri) | Time (approx.) | Activity | | --------------- | ------------------------------------------------------------------------------------------- | | **09:30** | Stand‑up / triage – review yesterday’s PRs & failing tests. | | **10:00** | Ticket grooming (15 min) – split issues, label `assign-to-jules`. | | **10:15–13:00** | Deep‑work block – manual coding & Jules branches run in parallel. | | **13:00** | **Jules PR review** – verify diff, run static analysis, comment; merge only on green tests. | | **14:00–16:30** | Integration & smoke tests on fixture dataset; deploy to staging. | | **16:30** | Retro log (≤ 5 min) – append lessons‑learned to `docs/logs/YYYY‑MM‑DD.md`. | --- ## Jules Guard‑Rails	298	"{""source_filepath"": ""roadmap.txt"", ""doc_type"": ""txt"", ""doc_id"": ""roadmap.txt""}"
6a92a80f33ec4d6da71a3cb9bed874f3	roadmap.txt	Retro log (≤ 5 min) – append lessons‑learned to `docs/logs/YYYY‑MM‑DD.md`. | --- ## Jules Guard‑Rails | Risk | Mitigation | | -------------------------- | ---------------------------------------------------------------------- | | Over‑eager refactors | Pin Jules to *feature* branches; block from `main`/`prod`. | | Silent test failures | CI gate: `pytest && coverage ≥ 90 %`. | | Architectural drift | Require approved design‑doc comment before applying `assign-to-jules`. | | Debugging black‑box output | PR template must include Jules plan summary for traceability. | --- ## Toolchain & Automation Checklist * **Poetry** – deterministic envs; `poetry version` for bumps. * **Ruff + Black** – fast lint/format (pre‑commit). * **Mypy** – ≥ 90 % typed functions. * **Pytest** – unit + tiny E2E fixtures (≤ 50 ms each); mark slow tests. * **GitHub Actions** – CI workflow: ```yaml jobs: test: steps: - uses: actions/checkout@v4 - uses: actions/setup-python@v5 - run: poetry install --with dev - run: poetry run pytest ``` * **Nightly cron** – run evaluation harness on full corpus; post metrics badge to README. * **Issue labels** – `type:ingest`, `type:retrieval`, `tech‑debt`, `assign-to-jules`. --- ## Definition of Done (per task) 1. Code + docstrings + type hints. 2. Unit tests: ≥ 1 happy path & ≥ 1 edge case. 3. Entry in `CHANGELOG.md`. 4. PR description follows template: *Context → Changes → How to test*. 5. CI green; human reviewer ✅. --- ### Friday Demo Cadence Every Friday aim to show a **thin vertical slice** (e.g., Week 2 = ingest‑embed‑retrieve on toy corpus) to keep momentum and surface integration issues early. --- *Last updated: 2025‑06‑11*	258	"{""source_filepath"": ""roadmap.txt"", ""doc_type"": ""txt"", ""doc_id"": ""roadmap.txt""}"
935f4e39affb49fdabe25758c25faab9	requirements.txt	python-pptx python-docx pdfplumber PyYAML	4	"{""source_filepath"": ""requirements.txt"", ""doc_type"": ""txt"", ""doc_id"": ""requirements.txt""}"
cde6ab4fc5bf412c974e7ff34db66726	tests/fixtures/demo.pptx	This is slide one.	4	"{""source_filepath"": ""tests/fixtures/demo.pptx"", ""doc_type"": ""pptx"", ""slide_number"": 1, ""type"": ""slide_content"", ""doc_id"": ""tests/fixtures/demo.pptx""}"
a85c945eaccd4fdcae6ddf6002a05a36	tests/fixtures/demo.pptx	Slide two has more content.	5	"{""source_filepath"": ""tests/fixtures/demo.pptx"", ""doc_type"": ""pptx"", ""slide_number"": 2, ""type"": ""slide_content"", ""doc_id"": ""tests/fixtures/demo.pptx""}"
1d29e0c38d12429cb963ef756c868fd1	tests/fixtures/demo.pptx	Third slide with important info.	5	"{""source_filepath"": ""tests/fixtures/demo.pptx"", ""doc_type"": ""pptx"", ""slide_number"": 3, ""type"": ""slide_content"", ""doc_id"": ""tests/fixtures/demo.pptx""}"
76e731acc55c46469851911c8e99535e	tests/fixtures/demo.pptx	Final slide. Thanks!	3	"{""source_filepath"": ""tests/fixtures/demo.pptx"", ""doc_type"": ""pptx"", ""slide_number"": 4, ""type"": ""slide_content"", ""doc_id"": ""tests/fixtures/demo.pptx""}"
31e552666fba4b5f918d0269d641e358	tests/fixtures/pdf/simple.pdf	This is page 1. This is page 2.	8	"{""source_filepath"": ""tests/fixtures/pdf/simple.pdf"", ""doc_type"": ""pdf"", ""source_path"": ""/app/tests/fixtures/pdf/simple.pdf"", ""title"": ""Simple Test PDF"", ""author"": ""Test Author"", ""created"": ""D:20250612131155+00'00'"", ""modified"": ""D:20250612131155+00'00'"", ""num_pages"": 2, ""doc_id"": ""tests/fixtures/pdf/simple.pdf""}"
932919b4d70d45c1ab5cbc1b1bd298ae	tests/fixtures/ingestion_test_data/test_document.docx	This is a test document.	5	"{""source_filepath"": ""tests/fixtures/ingestion_test_data/test_document.docx"", ""doc_type"": ""docx"", ""source"": ""tests/fixtures/ingestion_test_data/test_document.docx"", ""content_type"": ""docx"", ""doc_id"": ""tests/fixtures/ingestion_test_data/test_document.docx""}"
42e232eb2dd4436cb4b36eea7f80f586	tests/fixtures/ingestion_test_data/test_email.eml	This is the body of the test email.	8	"{""source_filepath"": ""tests/fixtures/ingestion_test_data/test_email.eml"", ""doc_type"": ""eml"", ""source"": ""tests/fixtures/ingestion_test_data/test_email.eml"", ""content_type"": ""email"", ""doc_id"": ""tests/fixtures/ingestion_test_data/test_email.eml""}"
8468625d561b4a4f878956fde0b105e8	tests/fixtures/emails/plain_email.eml	This is a test email with plain text content.	9	"{""source_filepath"": ""tests/fixtures/emails/plain_email.eml"", ""doc_type"": ""eml"", ""source"": ""tests/fixtures/emails/plain_email.eml"", ""content_type"": ""email"", ""doc_id"": ""tests/fixtures/emails/plain_email.eml""}"
d95eaaec81f8433db6d7cd42cedf0a6c	tests/fixtures/docx/simple.docx	This is a simple DOCX file with some text.	9	"{""source_filepath"": ""tests/fixtures/docx/simple.docx"", ""doc_type"": ""docx"", ""source"": ""tests/fixtures/docx/simple.docx"", ""content_type"": ""docx"", ""doc_id"": ""tests/fixtures/docx/simple.docx""}"
6660ef9ee3634ec488d73080ab93e5b7	tests/fixtures/docx/table.docx	Some text outside the table. Header 1 Header 2 Cell 1.1 Cell 1.2 Cell 2.1 Cell 2.2	17	"{""source_filepath"": ""tests/fixtures/docx/table.docx"", ""doc_type"": ""docx"", ""source"": ""tests/fixtures/docx/table.docx"", ""content_type"": ""docx"", ""doc_id"": ""tests/fixtures/docx/table.docx""}"
be6d833f413a4052a265931190a837f6	tests/fixtures/docx/3-para-doc.docx	Philosophy ('love of wisdom' in Ancient Greek) is a systematic study of general and fundamental questions concerning topics like existence, reason, knowledge, value, mind, and language. It is a rational and critical inquiry that reflects on its methods and assumptions. Historically, many of the individual sciences, such as physics and psychology, formed part of philosophy. However, they are considered separate academic disciplines in the modern sense of the term. Influential traditions in the history of philosophy include Western, Arabic–Persian, Indian, and Chinese philosophy. Western philosophy originated in Ancient Greece and covers a wide area of philosophical subfields. A central topic in Arabic–Persian philosophy is the relation between reason and revelation. Indian philosophy combines the spiritual problem of how to reach enlightenment with the exploration of the nature of reality and the ways of arriving at knowledge. Chinese philosophy focuses principally on practical issues about right social conduct, government, and self-cultivation. Major branches of philosophy are epistemology, ethics, logic, and metaphysics. Epistemology studies what knowledge is and how to acquire it. Ethics investigates moral principles and what constitutes right conduct. Logic is the study of correct reasoning and explores how good arguments can be distinguished from bad ones. Metaphysics examines the most general features of reality, existence, objects, and properties. Other subfields are aesthetics, philosophy of language, philosophy of mind, philosophy of religion, philosophy of science, philosophy of mathematics, philosophy of history, and political philosophy. Within each branch, there are competing schools of philosophy that promote different principles, theories, or methods.	250	"{""source_filepath"": ""tests/fixtures/docx/3-para-doc.docx"", ""doc_type"": ""docx"", ""source"": ""tests/fixtures/docx/3-para-doc.docx"", ""content_type"": ""docx"", ""doc_id"": ""tests/fixtures/docx/3-para-doc.docx""}"
8ba37b90df1d47ce9db91c95f8d791f4	tests/fixtures/xlsx/demo.xlsx	a b c 1 4 7 2 5 8 3 6 9	12	"{""source_filepath"": ""tests/fixtures/xlsx/demo.xlsx"", ""doc_type"": ""xlsx"", ""sheet_name"": ""Sheet1"", ""type"": ""sheet_content"", ""doc_id"": ""tests/fixtures/xlsx/demo.xlsx""}"
0e3581f92aa44325b240d3a24f1fe855	tests/fixtures/xlsx/demo.xlsx	x y z omo ooo ewr mom jjj rew aoa hjh erw oao jhj wre	15	"{""source_filepath"": ""tests/fixtures/xlsx/demo.xlsx"", ""doc_type"": ""xlsx"", ""sheet_name"": ""Sheet2"", ""type"": ""sheet_content"", ""doc_id"": ""tests/fixtures/xlsx/demo.xlsx""}"
79221e2b23704fa2a1eaddf47aa54229	tests/fixtures/xlsx/demo.xlsx	l m n qr ooo 342f qwr jjj dsfd33 235 qwr 122df 656 jhj saf	15	"{""source_filepath"": ""tests/fixtures/xlsx/demo.xlsx"", ""doc_type"": ""xlsx"", ""sheet_name"": ""Sheet3"", ""type"": ""sheet_content"", ""doc_id"": ""tests/fixtures/xlsx/demo.xlsx""}"
6ffcc483bc3d4be9a77fd9e1ad2609bc	tests/fixtures/e2e_ingest/simple.docx	This is a simple DOCX file with some text.	9	"{""source_filepath"": ""tests/fixtures/e2e_ingest/simple.docx"", ""doc_type"": ""docx"", ""source"": ""tests/fixtures/e2e_ingest/simple.docx"", ""content_type"": ""docx"", ""doc_id"": ""tests/fixtures/e2e_ingest/simple.docx""}"
b22b812cea984a2f89c15df3b3c2f23e	tests/fixtures/e2e_ingest/simple.pdf	This is page 1. This is page 2.	8	"{""source_filepath"": ""tests/fixtures/e2e_ingest/simple.pdf"", ""doc_type"": ""pdf"", ""source_path"": ""/app/tests/fixtures/e2e_ingest/simple.pdf"", ""title"": ""Simple Test PDF"", ""author"": ""Test Author"", ""created"": ""D:20250612131155+00'00'"", ""modified"": ""D:20250612131155+00'00'"", ""num_pages"": 2, ""doc_id"": ""tests/fixtures/e2e_ingest/simple.pdf""}"
590c9df12c6d4660b1a4c4d954b89922	tests/fixtures/e2e_ingest/plain_email.eml	This is a test email with plain text content.	9	"{""source_filepath"": ""tests/fixtures/e2e_ingest/plain_email.eml"", ""doc_type"": ""eml"", ""source"": ""tests/fixtures/e2e_ingest/plain_email.eml"", ""content_type"": ""email"", ""doc_id"": ""tests/fixtures/e2e_ingest/plain_email.eml""}"
09162b707ada45b7bfdbf850b28f2d33	tests/fixtures/pptx/test_presentation.pptx	Presenter Notes (Slide 1): Slide 1 Notes	7	"{""source_filepath"": ""tests/fixtures/pptx/test_presentation.pptx"", ""doc_type"": ""pptx"", ""slide_number"": 1, ""type"": ""presenter_notes"", ""doc_id"": ""tests/fixtures/pptx/test_presentation.pptx""}"
0b423d7bed0b42ee91691630b8cbdab7	tests/fixtures/pptx/test_presentation.pptx	Slide 1 Title Slide 1 Textbox Content	7	"{""source_filepath"": ""tests/fixtures/pptx/test_presentation.pptx"", ""doc_type"": ""pptx"", ""slide_number"": 1, ""type"": ""slide_content"", ""doc_id"": ""tests/fixtures/pptx/test_presentation.pptx""}"
f966a3f4a69a4500901c92b53423cd40	tests/fixtures/pptx/test_presentation.pptx	Presenter Notes (Slide 2): Slide 2 Notes	7	"{""source_filepath"": ""tests/fixtures/pptx/test_presentation.pptx"", ""doc_type"": ""pptx"", ""slide_number"": 2, ""type"": ""presenter_notes"", ""doc_id"": ""tests/fixtures/pptx/test_presentation.pptx""}"
560f5958316e4ecb80d26ee14b5f7886	tests/fixtures/pptx/test_presentation.pptx	Slide 2 Main Content Slide 2 Shape Text	8	"{""source_filepath"": ""tests/fixtures/pptx/test_presentation.pptx"", ""doc_type"": ""pptx"", ""slide_number"": 2, ""type"": ""slide_content"", ""doc_id"": ""tests/fixtures/pptx/test_presentation.pptx""}"
efedc160d03b453d83c4d115992fb6ec	tests/fixtures/pptx/test_presentation.pptx	Presenter Notes (Slide 3): Slide 3 Notes Only	8	"{""source_filepath"": ""tests/fixtures/pptx/test_presentation.pptx"", ""doc_type"": ""pptx"", ""slide_number"": 3, ""type"": ""presenter_notes"", ""doc_id"": ""tests/fixtures/pptx/test_presentation.pptx""}"
11bf383e72f84784b5d85d0b8f19d27a	tests/fixtures/pptx/not_a_pptx.txt	This is a text file.	5	"{""source_filepath"": ""tests/fixtures/pptx/not_a_pptx.txt"", ""doc_type"": ""txt"", ""doc_id"": ""tests/fixtures/pptx/not_a_pptx.txt""}"
